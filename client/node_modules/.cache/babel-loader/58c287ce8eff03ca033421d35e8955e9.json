{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/Notifications/NotificationsHistory/NotificationsHistory.js\";\nimport React from 'react';\nimport { List, Image, Button, Transition, Grid, Divider } from 'semantic-ui-react';\nimport API from '../../../utils/API';\nimport ModalUser from \"../../ModalUser/ModalUser\";\nimport equal from 'fast-deep-equal';\n\nconst moment = require('moment');\n\nexport default class NotificationsHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this._mounted = true;\n      await API.getNotifications().then(res => {\n        if (res.status === 200) this._mounted && this.setState({\n          notifications: res.data.notifications\n        });\n      });\n    };\n\n    this.handleDismiss = async (i, notif_id) => {\n      if (this._mounted) {\n        this.state.notifications.splice(i, 1);\n        this.setState({\n          notifications: this.state.notifications\n        }, () => {\n          this.props.updateNotifNb(this.state.notifications.length);\n          API.deletenotif(notif_id);\n        });\n      }\n    };\n\n    this.clickedUser = async userIdFocus => {\n      // Send notification\n      this.props.sWallVisit(userIdFocus);\n      this._mounted && this.setState({\n        userIdFocus: userIdFocus\n      });\n    };\n\n    this.state = {\n      notifications: [],\n      userIdFocus: null,\n      loading: false\n    };\n    this._mounted = false;\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  renderSwitchType(type) {\n    switch (type) {\n      case 1:\n        return 'Visited your profile  ';\n\n      case 2:\n        return 'Send you a message  ';\n\n      case 3:\n        return 'Liked you back  ';\n\n      case 4:\n        return 'Remove his like  ';\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          userIdFocus = _this$state.userIdFocus,\n          liked = _this$state.liked,\n          notifications = _this$state.notifications;\n    return React.createElement(Grid, {\n      columns: 1,\n      textAlign: 'center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.userIdFocus ? React.createElement(ModalUser, {\n      userid: userIdFocus,\n      liked: liked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : null, React.createElement(Grid.Column, {\n      textAlign: 'left',\n      mobile: 16,\n      tablet: 8,\n      computer: 8,\n      largeScreen: 8,\n      widescreen: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"NotificationsTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Notifications history\"))), React.createElement(\"div\", {\n      className: \"NotificationsHistoric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(List, {\n      verticalAlign: 'middle',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, notifications.length < 1 ? React.createElement(\"div\", {\n      className: 'nothingtoshow',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Nothing to show\")) : null, notifications.map((obj, i) => React.createElement(List.Item, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.handleDismiss(i, obj.notif_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Dismiss\")), React.createElement(Image, {\n      avatar: true,\n      src: obj.img_link,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(List.Content, {\n      as: \"a\",\n      className: \"NotifFirstname\",\n      onClick: () => this.clickedUser(obj.user_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, ' ', \" \", obj.firstname), React.createElement(List.Description, {\n      className: \"NotifDesc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.renderSwitchType(obj.type), \"on \", moment(obj.date).fromNow())), i < notifications.length - 1 ? React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }) : null)))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/Notifications/NotificationsHistory/NotificationsHistory.js"],"names":["React","List","Image","Button","Transition","Grid","Divider","API","ModalUser","equal","moment","require","NotificationsHistory","Component","constructor","props","componentDidMount","_mounted","getNotifications","then","res","status","setState","notifications","data","handleDismiss","i","notif_id","state","splice","updateNotifNb","length","deletenotif","clickedUser","userIdFocus","sWallVisit","loading","componentWillUnmount","renderSwitchType","type","render","liked","map","obj","img_link","user_id","firstname","date","fromNow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,IAAzC,EAA+CC,OAA/C,QAA6D,mBAA7D;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAGA,eAAe,MAAMC,oBAAN,SAAmCZ,KAAK,CAACa,SAAzC,CAAkD;AAE7DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAUlBC,iBAVkB,GAUE,YAAW;AAC3B,WAAKC,QAAL,GAAgB,IAAhB;AACA,YAAMV,GAAG,CAACW,gBAAJ,GACDC,IADC,CACIC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EACI,KAAKJ,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAACC,UAAAA,aAAa,EAAEH,GAAG,CAACI,IAAJ,CAASD;AAAzB,SAAd,CAAjB;AACP,OAJC,CAAN;AAKH,KAjBiB;;AAAA,SAsClBE,aAtCkB,GAsCF,OAAMC,CAAN,EAASC,QAAT,KAAsB;AAClC,UAAI,KAAKV,QAAT,EAAmB;AACf,aAAKW,KAAL,CAAWL,aAAX,CAAyBM,MAAzB,CAAgCH,CAAhC,EAAmC,CAAnC;AACA,aAAKJ,QAAL,CAAc;AAACC,UAAAA,aAAa,EAAE,KAAKK,KAAL,CAAWL;AAA3B,SAAd,EAAyD,MAAM;AAC3D,eAAKR,KAAL,CAAWe,aAAX,CAAyB,KAAKF,KAAL,CAAWL,aAAX,CAAyBQ,MAAlD;AACAxB,UAAAA,GAAG,CAACyB,WAAJ,CAAgBL,QAAhB;AACH,SAHD;AAIH;AACJ,KA9CiB;;AAAA,SAgDlBM,WAhDkB,GAgDJ,MAAMC,WAAN,IAAsB;AAChC;AACA,WAAKnB,KAAL,CAAWoB,UAAX,CAAsBD,WAAtB;AACA,WAAKjB,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAACY,QAAAA,WAAW,EAAEA;AAAd,OAAd,CAAjB;AACH,KApDiB;;AAEd,SAAKN,KAAL,GAAa;AACTL,MAAAA,aAAa,EAAE,EADN;AAETW,MAAAA,WAAW,EAAE,IAFJ;AAGTE,MAAAA,OAAO,EAAE;AAHA,KAAb;AAKA,SAAKnB,QAAL,GAAgB,KAAhB;AACH;;AAWDoB,EAAAA,oBAAoB,GAAG;AACnB,SAAKpB,QAAL,GAAgB,KAAhB;AACH;;AAIDqB,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,YAAQA,IAAR;AACI,WAAK,CAAL;AACI,eAAO,wBAAP;;AACJ,WAAK,CAAL;AACI,eAAO,sBAAP;;AACJ,WAAK,CAAL;AACI,eAAO,kBAAP;;AACJ,WAAK,CAAL;AACI,eAAO,mBAAP;AARR;AAUH;;AAiBDC,EAAAA,MAAM,GAAE;AAAA,wBAC0C,KAAKZ,KAD/C;AAAA,UACIM,WADJ,eACIA,WADJ;AAAA,UACiBO,KADjB,eACiBA,KADjB;AAAA,UACwBlB,aADxB,eACwBA,aADxB;AAEJ,WACI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAAf;AAAkB,MAAA,SAAS,EAAE,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKK,KAAL,CAAWM,WAAX,GACG,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAEA,WAAnB;AAAgC,MAAA,KAAK,EAAEO,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAEK,IAHV,EAII,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAE,MAAxB;AAAgC,MAAA,MAAM,EAAE,EAAxC;AAA4C,MAAA,MAAM,EAAE,CAApD;AAAuD,MAAA,QAAQ,EAAE,CAAjE;AAAoE,MAAA,WAAW,EAAE,CAAjF;AAAoF,MAAA,UAAU,EAAE,CAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,CADJ,CADJ,EAMI;AAAK,MAAA,SAAS,EAAE,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKlB,aAAa,CAACQ,MAAd,GAAuB,CAAvB,GACG;AAAK,MAAA,SAAS,EAAE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CADH,GAIG,IALR,EAOKR,aAAa,CAACmB,GAAd,CAAkB,CAACC,GAAD,EAAMjB,CAAN,KACf,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,OAAO,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAE,MAAM,KAAKD,aAAL,CAAmBC,CAAnB,EAAsBiB,GAAG,CAAChB,QAA1B,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CADJ,EAOI,oBAAC,KAAD;AAAO,MAAA,MAAM,MAAb;AAAc,MAAA,GAAG,EAAEgB,GAAG,CAACC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAQI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,EAAE,EAAC,GADP;AAEI,MAAA,SAAS,EAAE,gBAFf;AAGI,MAAA,OAAO,EAAE,MAAM,KAAKX,WAAL,CAAiBU,GAAG,CAACE,OAArB,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,GALL,OAKWF,GAAG,CAACG,SALf,CARJ,EAcI,oBAAC,IAAD,CAAM,WAAN;AAAkB,MAAA,SAAS,EAAE,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKR,gBAAL,CAAsBK,GAAG,CAACJ,IAA1B,CADL,SAEQ7B,MAAM,CAACiC,GAAG,CAACI,IAAL,CAAN,CAAiBC,OAAjB,EAFR,CAdJ,CADJ,EAoBKtB,CAAC,GAAGH,aAAa,CAACQ,MAAd,GAAwB,CAA5B,GAA+B,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,GAA6C,IApBlD,CADH,CAPL,CANJ,CADJ,CANJ,CAJJ,CADJ;AAwDH;;AAjH4D","sourcesContent":["import React from 'react';\nimport {List, Image, Button, Transition, Grid, Divider} from 'semantic-ui-react';\nimport API from '../../../utils/API';\nimport ModalUser from \"../../ModalUser/ModalUser\";\nimport equal from 'fast-deep-equal';\nconst moment = require('moment');\n\n\nexport default class NotificationsHistory extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            notifications: [],\n            userIdFocus: null,\n            loading: false,\n        };\n        this._mounted = false;\n    }\n\n    componentDidMount = async() => {\n        this._mounted = true;\n        await API.getNotifications()\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({notifications: res.data.notifications})\n            })\n    };\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n\n\n    renderSwitchType(type) {\n        switch (type) {\n            case 1:\n                return 'Visited your profile  ';\n            case 2:\n                return 'Send you a message  ';\n            case 3:\n                return 'Liked you back  ';\n            case 4:\n                return 'Remove his like  ';\n        }\n    };\n\n    handleDismiss = async(i, notif_id) => {\n        if (this._mounted) {\n            this.state.notifications.splice(i, 1);\n            this.setState({notifications: this.state.notifications}, () => {\n                this.props.updateNotifNb(this.state.notifications.length);\n                API.deletenotif(notif_id);\n            });\n        }\n    };\n\n    clickedUser = async(userIdFocus) => {\n        // Send notification\n        this.props.sWallVisit(userIdFocus);\n        this._mounted && this.setState({userIdFocus: userIdFocus});\n    };\n    render(){\n        const { userIdFocus, liked, notifications } = this.state;\n        return (\n            <Grid columns={1} textAlign={'center'}>\n                {this.state.userIdFocus ?\n                    <ModalUser userid={userIdFocus} liked={liked} />\n                    : null }\n                <Grid.Column textAlign={'left'} mobile={16} tablet={8} computer={8} largeScreen={8} widescreen={8}>\n                    <div className='NotificationsTitle'>\n                        <Grid.Row >\n                            <h1>Notifications history</h1>\n                        </Grid.Row>\n                    </div>\n                    <div className={\"NotificationsHistoric\"}>\n                        <Grid.Row>\n                            {/*<Transition.Group*/}\n                            {/*    as={List}*/}\n                            {/*    duration={200}*/}\n                            {/*    verticalAlign='middle'*/}\n                            {/*>*/}\n                            <List verticalAlign={'middle'}>\n                                {notifications.length < 1 ?\n                                    <div className={'nothingtoshow'}>\n                                        <p>Nothing to show</p>\n                                    </div> :\n                                    null\n                                }\n                                {notifications.map((obj, i) => (\n                                    <List.Item key={i}>\n                                        <List.Content>\n                                            <List.Content floated='right'>\n                                                <Button\n                                                    onClick={() => this.handleDismiss(i, obj.notif_id)}>\n                                                    Dismiss\n                                                </Button>\n                                            </List.Content>\n                                            <Image avatar src={obj.img_link}/>\n                                            <List.Content\n                                                as='a'\n                                                className={\"NotifFirstname\"}\n                                                onClick={() => this.clickedUser(obj.user_id)}\n                                            >\n                                                {' '} {obj.firstname}</List.Content>\n                                            <List.Description className={\"NotifDesc\"}>\n                                                {this.renderSwitchType(obj.type)}\n                                                on {moment(obj.date).fromNow()}\n                                            </List.Description>\n                                        </List.Content>\n                                        {i < notifications.length  - 1? <Divider /> : null}\n                                    </List.Item>\n                                ))}\n                            {/*</Transition.Group>*/}\n                            </List>\n                        </Grid.Row>\n                    </div>\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}