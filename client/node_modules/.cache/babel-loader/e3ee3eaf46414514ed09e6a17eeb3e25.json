{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/containers/Chat/Chat.js\";\nimport React from 'react';\nimport { List, Image, Button, Transition, Grid, Divider, Icon } from 'semantic-ui-react';\nimport API from './../../utils/API';\nimport ModalUser from \"../../components/ModalUser/ModalUser\";\nimport ModalChat from '../../components/ModalChat/ModalChat';\n\nconst moment = require('moment');\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this._mounted = true;\n      await API.getMatchedUsers().then(res => {\n        if (res.status === 200) {\n          this._mounted && this.setState({\n            matchedusers: res.data.matchedusers\n          });\n        }\n      });\n      await API.getUserInterests().then(response => {\n        if (response.status === 200) this._mounted && this.setState({\n          interests: response.data.interests\n        });\n      });\n    };\n\n    this.clickedUser = async userIdFocus => {\n      // Send notification\n      this.props.sWallVisit(userIdFocus); // Inner Ref Modal\n\n      this.innerRefModal.current && this.innerRefModal.current.loadUser(userIdFocus);\n    };\n\n    this.handleOpenChat = async user => {\n      this.innerRefModalChat.current && this.innerRefModalChat.current.handleOpen(user);\n    };\n\n    this.state = {\n      matchedusers: [],\n      interests: [],\n      userIdFocus: null\n    };\n    this._mounted = false;\n    this.innerRefModal = React.createRef();\n    this.innerRefModalChat = React.createRef();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  render() {\n    const {\n      matchedusers,\n      interests\n    } = this.state;\n    return React.createElement(Grid, {\n      columns: 1,\n      textAlign: 'center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(ModalUser, {\n      interests: interests,\n      s_like: this.props.s_like,\n      s_like_unliked: this.props.s_like_unliked,\n      s_like_likedback: this.props.s_like_likedback,\n      ref: this.innerRefModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(ModalChat, {\n      ref: this.innerRefModalChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Grid.Column, {\n      textAlign: 'left',\n      mobile: 16,\n      tablet: 8,\n      computer: 8,\n      largeScreen: 8,\n      widescreen: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Matched users chat\"))), React.createElement(\"div\", {\n      className: \"ChatHistoric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Transition.Group, {\n      as: List,\n      duration: 200,\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, matchedusers.length < 1 ? React.createElement(\"div\", {\n      className: 'nothingtoshow',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"No matched users\")) : null, matchedusers.map((obj, i) => React.createElement(List.Item, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.handleOpenChat(obj),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Open chat\")), React.createElement(Image, {\n      avatar: true,\n      src: obj.img_link,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(List.Content, {\n      as: \"a\",\n      className: \"ChatFirstname\",\n      onClick: () => this.clickedUser(obj.user_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, ' ', \" \", obj.firstname), React.createElement(List.Description, {\n      className: \"ChatDesc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, obj.online ? React.createElement(\"span\", {\n      className: 'OnlineChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'circle',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), \"Online\") : React.createElement(\"span\", {\n      className: 'LastConnectionChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'circle',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), \"Online \", moment(obj.last_date_online).fromNow())))), i < matchedusers.length - 1 ? React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }) : null)))))));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/containers/Chat/Chat.js"],"names":["React","List","Image","Button","Transition","Grid","Divider","Icon","API","ModalUser","ModalChat","moment","require","Chat","Component","constructor","props","componentDidMount","_mounted","getMatchedUsers","then","res","status","setState","matchedusers","data","getUserInterests","response","interests","clickedUser","userIdFocus","sWallVisit","innerRefModal","current","loadUser","handleOpenChat","user","innerRefModalChat","handleOpen","state","createRef","componentWillUnmount","render","s_like","s_like_unliked","s_like_likedback","length","map","obj","i","img_link","user_id","firstname","online","last_date_online","fromNow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {List, Image, Button, Transition, Grid, Divider, Icon} from 'semantic-ui-react';\nimport API from './../../utils/API';\nimport ModalUser from \"../../components/ModalUser/ModalUser\";\nimport ModalChat from '../../components/ModalChat/ModalChat';\nconst moment = require('moment');\n\nclass Chat extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            matchedusers: [],\n            interests: [],\n            userIdFocus: null\n        };\n        this._mounted = false;\n        this.innerRefModal = React.createRef();\n        this.innerRefModalChat = React.createRef();\n    }\n\n    componentDidMount = async() => {\n        this._mounted = true;\n        await API.getMatchedUsers()\n            .then(res => {\n                if (res.status === 200) {\n                    this._mounted && this.setState({matchedusers: res.data.matchedusers})\n                }\n            });\n        await API.getUserInterests()\n            .then(response => {\n                if (response.status === 200)\n                    this._mounted && this.setState({interests: response.data.interests})\n            });\n    };\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    clickedUser = async(userIdFocus) => {\n        // Send notification\n        this.props.sWallVisit(userIdFocus);\n        // Inner Ref Modal\n        this.innerRefModal.current && this.innerRefModal.current.loadUser(userIdFocus);\n    };\n\n    // Open modal chat with ref\n    handleOpenChat = async(user) => { this.innerRefModalChat.current && this.innerRefModalChat.current.handleOpen(user) };\n    render(){\n        const { matchedusers, interests } = this.state;\n        return (\n            <Grid columns={1} textAlign={'center'}>\n                <ModalUser\n                    interests={interests}\n                    s_like={this.props.s_like}\n                    s_like_unliked={this.props.s_like_unliked}\n                    s_like_likedback={this.props.s_like_likedback}\n                    ref={this.innerRefModal} />\n                <ModalChat\n                    ref={this.innerRefModalChat} />\n                <Grid.Column textAlign={'left'} mobile={16} tablet={8} computer={8} largeScreen={8} widescreen={8}>\n                    <div className='ChatTitle'>\n                        <Grid.Row>\n                            <h1>Matched users chat</h1>\n                        </Grid.Row>\n                    </div>\n                    <div className={\"ChatHistoric\"}>\n                        <Grid.Row>\n                            <Transition.Group\n                                as={List}\n                                duration={200}\n                                verticalAlign='middle'\n                            >\n                                {matchedusers.length < 1 ?\n                                    <div className={'nothingtoshow'}>\n                                        <p>No matched users</p>\n                                    </div> :\n                                    null\n                                }\n                                {matchedusers.map((obj, i) => (\n                                    <List.Item key={i}>\n                                        <List.Content>\n                                            <List.Content floated='right'>\n                                                <Button\n                                                    onClick={() => this.handleOpenChat(obj)}>\n                                                    Open chat\n                                                </Button>\n                                            </List.Content>\n                                            <Image avatar src={obj.img_link}/>\n                                            <List.Content\n                                                as='a'\n                                                className={\"ChatFirstname\"}\n                                                onClick={() => this.clickedUser(obj.user_id)}>\n                                                {' '} {obj.firstname}</List.Content>\n                                            <List.Description className={\"ChatDesc\"}>\n                                                <p>\n                                                    {obj.online ?\n                                                        <span className={'OnlineChat'}>\n                                                            <Icon name={'circle'} />\n                                                            Online\n                                                        </span> :\n                                                        <span className={'LastConnectionChat'}>\n                                                            <Icon name={'circle'} />\n                                                            Online {moment(obj.last_date_online).fromNow()}\n                                                        </span>\n                                                    }\n                                                </p>\n                                            </List.Description>\n                                        </List.Content>\n                                        {i < matchedusers.length - 1? <Divider /> : null}\n                                    </List.Item>\n                                ))}\n                            </Transition.Group>\n                        </Grid.Row>\n                    </div>\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}