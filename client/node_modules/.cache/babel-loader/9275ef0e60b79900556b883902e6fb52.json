{"ast":null,"code":"var _jsxFileName = \"/Users/jeguglie/Desktop/MatchApp/client/src/components/Notifications/ModalUserLike/ModalUserLike.js\";\nimport React from 'react';\nimport API from './../../../utils/API';\nimport { Divider, Grid, Image, Label, Modal, Segment } from \"semantic-ui-react\";\n\nclass ModalUserLike extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: null,\n      showModal: false,\n      user: null\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        userID: null,\n        showModal: false,\n        user: null\n      });\n      this.props.handleClose();\n    };\n\n    this.componentDidUpdate = async (props, state) => {\n      if (props.userID !== state.userID) console.log(props.userID);\n      await API.withAuth().then(res => {\n        if (res.status === 200) {\n          API.getUserIdProfile(props.userID).then(res => {\n            if (res.status === 200) this.setState({\n              user: res.data.user,\n              showModal: true,\n              userID: props.userID\n            });\n          });\n        }\n      }).catch(err => {});\n      return null;\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          userID = _this$state.userID,\n          showModal = _this$state.showModal,\n          user = _this$state.user;\n    if (user) return React.createElement(Modal, {\n      dimmer: \"blurring\",\n      size: 'tiny',\n      open: showModal,\n      onClose: this.handleClose,\n      className: \"ModalUserLike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: \"CardHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"CardHeaderTile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" \", user.firstname, \" \", user.lastname, \", \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, user.age))), React.createElement(Modal.Content, {\n      className: \"ModalProfilView\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      className: \"RowImages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Image, {\n      rounded: true,\n      size: \"medium\",\n      src: user.imgs[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(Grid.Row, {\n      className: \"RowImages\",\n      centered: true,\n      columns: user.imgs.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, user.imgs.map((img, i) => {\n      if (i > 0) return React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Image, {\n        rounded: true,\n        size: \"small\",\n        src: user.imgs[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    })))));\n    return null;\n  }\n\n}\n\nexport default ModalUserLike;","map":{"version":3,"sources":["/Users/jeguglie/Desktop/MatchApp/client/src/components/Notifications/ModalUserLike/ModalUserLike.js"],"names":["React","API","Divider","Grid","Image","Label","Modal","Segment","ModalUserLike","Component","state","userID","showModal","user","handleClose","setState","props","componentDidUpdate","console","log","withAuth","then","res","status","getUserIdProfile","data","catch","err","render","firstname","lastname","age","imgs","length","map","img","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport API from './../../../utils/API';\nimport {Divider, Grid, Image, Label, Modal, Segment} from \"semantic-ui-react\";\n\nclass ModalUserLike extends React.Component {\n\n    state = {\n        userID: null,\n        showModal: false,\n        user: null,\n\n    };\n\n    handleClose = () => {\n        this.setState({ userID: null, showModal: false, user: null});\n        this.props.handleClose();\n    }\n\n   componentDidUpdate = async(props, state) =>{\n        if (props.userID !== state.userID)\n            console.log(props.userID);\n        await API.withAuth()\n           .then(res => {\n               if (res.status === 200) {\n                   API.getUserIdProfile(props.userID)\n                       .then(res => {\n                           if (res.status === 200)\n                               this.setState({user: res.data.user, showModal: true, userID: props.userID});\n                       });\n               }\n           })\n            .catch(err => {})\n        return null;\n    }\n\n    render(){\n        const { userID, showModal , user} = this.state;\n        if (user)\n            return (\n                <Modal\n                    dimmer={\"blurring\"}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    className=\"ModalUserLike\">\n                    <Modal.Header className=\"CardHeader\"><h1\n                        className=\"CardHeaderTile\"> {user.firstname} {user.lastname}, <strong>{user.age}</strong></h1>\n                    </Modal.Header>\n                    <Modal.Content className=\"ModalProfilView\">\n                        <Modal.Header></Modal.Header>\n                        <Divider hidden/>\n                        <Grid centered columns={2}>\n                            <Grid.Column className=\"RowImages\">\n                                <Image rounded size='medium' src={user.imgs[0]}/>\n                            </Grid.Column>\n                            <Grid.Row className=\"RowImages\" centered columns={user.imgs.length}>\n                                {user.imgs.map((img, i) => {\n                                    if (i > 0)\n                                        return (\n                                            <Grid.Column>\n                                                <Image rounded size='small' src={user.imgs[i]}/>\n                                            </Grid.Column>\n                                        )\n                                })}\n                            </Grid.Row>\n                        </Grid>\n                    </Modal.Content>\n                </Modal>\n            )\n        return null;\n    }\n}\n\nexport default ModalUserLike;"]},"metadata":{},"sourceType":"module"}