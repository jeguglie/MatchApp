{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js\";\nimport React from 'react';\nimport { Form, Modal, Input, Divider, Icon } from 'semantic-ui-react';\nimport API from '../../utils/API';\n\nclass ModalChat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpen = async user => {\n      this._mounted && this.setState({\n        showModal: true,\n        user: user\n      });\n      await API.getMessages(user.user_id).then(res => {\n        if (res.status === 200) this._mounted && this.setState({\n          messages: res.data.messages\n        }, () => {\n          window.scrollTo(0, 1e10);\n        });\n      });\n    };\n\n    this.handleClose = () => {\n      this._mounted && this.setState({\n        showModal: false,\n        user: [],\n        messages: []\n      });\n    };\n\n    this.handleSend = async () => {\n      const message = this.innerRef.current.inputRef.current.value.toString();\n      const user_id = this.state.user.user_id;\n      await API.sendMessage(user_id, message).then(res => {\n        if (res.status === 200) {\n          this.addMessage(message, true);\n          this._mounted && this.props.s_message_send(user_id, message);\n        }\n      });\n    };\n\n    this.addMessage = (message, user_id_emitter, user_id_receiver) => {\n      let messages = this.state.messages;\n      messages.push({\n        user_id: user_id_emitter,\n        user_id_dest: user_id_receiver,\n        timestamp: new Date().getDate(),\n        message: message\n      });\n      window.scrollTo(0, 1e10);\n      this._mounted && this.setState({\n        messages: messages\n      });\n    };\n\n    this._mounted = false;\n    this.state = {\n      showModal: false,\n      user: [],\n      messages: []\n    };\n    this.innerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  } // Outside Ref\n\n\n  render() {\n    const {\n      showModal,\n      user,\n      messages\n    } = this.state;\n\n    function userOnline() {\n      if (user.online) return React.createElement(\"span\", {\n        className: 'OnlineChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), \" \");else return React.createElement(\"span\", {\n        className: 'LastConnectionChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \" \");\n    }\n\n    function messagesRows() {\n      let user_id = user.user_id;\n\n      if (messages && messages.length) {\n        return messages.map((obj, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            className: obj.user_id === user_id ? 'yours messages' : 'mine messages',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'message',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, \" \", obj.message, \" \")));\n        });\n      }\n    }\n\n    return user ? React.createElement(Modal, {\n      className: 'ModalChat',\n      size: 'tiny',\n      open: showModal,\n      onClose: this.handleClose,\n      closeIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: 'HeaderChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, userOnline(), \" \", ' ', React.createElement(\"span\", {\n      className: 'chatUserBadge',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, user.firstname)), React.createElement(Modal.Content, {\n      scrolling: true,\n      className: 'ModalChatContent',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'messagesRows',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'chat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, messagesRows()))), React.createElement(Modal.Actions, {\n      className: 'inputChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      action: {\n        icon: 'send'\n      },\n      fluid: true,\n      ref: this.innerRef,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })))) : null;\n  }\n\n}\n\nexport default ModalChat;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js"],"names":["React","Form","Modal","Input","Divider","Icon","API","ModalChat","Component","constructor","props","handleOpen","user","_mounted","setState","showModal","getMessages","user_id","then","res","status","messages","data","window","scrollTo","handleClose","handleSend","message","innerRef","current","inputRef","value","toString","state","sendMessage","addMessage","s_message_send","user_id_emitter","user_id_receiver","push","user_id_dest","timestamp","Date","getDate","createRef","componentDidMount","componentWillUnmount","render","userOnline","online","messagesRows","length","map","obj","i","firstname","icon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Modal, Input, Divider, Icon } from 'semantic-ui-react'\nimport API from '../../utils/API';\n\nclass ModalChat extends React.Component {\n    constructor(props){\n        super(props);\n        this._mounted = false;\n        this.state = {\n            showModal: false,\n            user: [],\n            messages: [],\n        };\n        this.innerRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    // Outside Ref\n    handleOpen = async(user) => {\n        this._mounted && this.setState({showModal: true, user: user});\n        await API.getMessages(user.user_id)\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({messages: res.data.messages}, () => {\n                        window.scrollTo(0,1e10);\n                    });\n            })\n    };\n    handleClose = () => {this._mounted && this.setState({showModal: false, user: [], messages: []})};\n    handleSend = async() => {\n        const message = this.innerRef.current.inputRef.current.value.toString();\n        const user_id = this.state.user.user_id;\n        await API.sendMessage(user_id, message)\n            .then(res => {\n                if (res.status === 200) {\n                    this.addMessage(message, true);\n                    this._mounted && this.props.s_message_send(user_id, message);\n                }\n            })\n    };\n\n    addMessage = (message, user_id_emitter, user_id_receiver) => {\n        let messages = this.state.messages;\n        messages.push({\n            user_id: user_id_emitter,\n            user_id_dest: user_id_receiver,\n            timestamp: new Date().getDate(),\n            message: message\n        });\n        window.scrollTo(0,1e10);\n        this._mounted && this.setState({messages: messages});\n    };\n\n    render(){\n        const { showModal, user, messages } = this.state;\n        function userOnline() {\n            if (user.online)\n                return <span className={'OnlineChat'}> <Icon name={'circle'}/> </span>;\n            else\n                return <span className={'LastConnectionChat'}> <Icon name={'circle'}/> </span>\n        }\n        function messagesRows() {\n            let user_id = user.user_id;\n            if (messages && messages.length){\n                return messages.map( (obj, i) => {\n                    return (\n                            <div key={i} className={obj.user_id === user_id ? 'yours messages' : 'mine messages'}>\n                                <div className={'message'}>\n                                    <p> {obj.message} </p>\n                                </div>\n                            </div>\n                    )\n                })\n            }\n        }\n        return (\n            user ?\n                <Modal\n                    className={'ModalChat'}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    closeIcon>\n                    <Modal.Header className={'HeaderChat'}>\n                        {userOnline()} {' '}\n                        <span className={'chatUserBadge'}>{user.firstname}</span>\n                    </Modal.Header>\n                    <Modal.Content scrolling className={'ModalChatContent'}>\n                        <div className={'messagesRows'}>\n                            <div className={'chat'}>\n                                    {messagesRows()}\n                            </div>\n                        </div>\n                    </Modal.Content>\n                    <Modal.Actions className={'inputChat'}>\n                            <Form onSubmit={this.handleSend}>\n                                <Input\n                                    size='large'\n                                    action={{ icon: 'send' }}\n                                    fluid\n                                    ref={this.innerRef}\n                                    placeholder='Type a message...'\n                                />\n                            </Form>\n                    </Modal.Actions>\n                </Modal> : null\n        )\n    }\n}\n\nexport default ModalChat;"]},"metadata":{},"sourceType":"module"}