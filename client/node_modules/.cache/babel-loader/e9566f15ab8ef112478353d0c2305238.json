{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js\";\nimport React from 'react';\nimport { Form, Modal, Input, Icon } from 'semantic-ui-react';\nimport API from '../../utils/API';\n\nclass ModalChat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpen = async user => {\n      this._mounted && this.setState({\n        showModal: true,\n        user: user\n      });\n      await API.getMessages(user.user_id).then(res => {\n        if (res.status === 200) this._mounted && this.setState({\n          messages: res.data.messages\n        }, () => {\n          this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'end',\n            inline: 'end'\n          });\n        });\n      });\n    };\n\n    this.handleClose = () => {\n      this._mounted && this.setState({\n        showModal: false,\n        user: [],\n        messages: []\n      });\n    };\n\n    this.handleSend = async () => {\n      const message = this.state.message;\n      const user_id = this.state.user.user_id; // Clear value in input\n\n      if (message && message.length) await API.sendMessage(user_id, message).then(res => {\n        if (res.status === 200) {\n          this.addMessage(message, true);\n          this._mounted && this.props.s_message_send(user_id, message);\n        }\n      });\n    };\n\n    this.addMessage = (message, user_id_emitter, user_id_receiver) => {\n      let messages = this.state.messages;\n      messages.push({\n        user_id: user_id_emitter,\n        user_id_dest: user_id_receiver,\n        timestamp: new Date().getDate(),\n        message: message\n      });\n      this._mounted && this.setState({\n        messages: messages,\n        message: ''\n      }, () => {\n        this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n          behavior: 'smooth',\n          block: 'end',\n          inline: 'end'\n        });\n      });\n    };\n\n    this.handleChange = (e, {\n      value\n    }) => {\n      this._mounted && this.setState({\n        message: value\n      });\n    };\n\n    this._mounted = false;\n    this.state = {\n      showModal: false,\n      user: [],\n      messages: [],\n      message: ''\n    };\n    this.innerRefScroll = React.createRef();\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  } // Outside Ref\n\n\n  render() {\n    const {\n      showModal,\n      user,\n      messages,\n      message\n    } = this.state;\n\n    function userOnline() {\n      if (user.online) return React.createElement(\"span\", {\n        className: 'OnlineChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), \" \");else return React.createElement(\"span\", {\n        className: 'LastConnectionChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), \" \");\n    }\n\n    function messagesRows() {\n      let user_id = user.user_id;\n\n      if (messages && messages.length) {\n        return messages.map((obj, i) => {\n          return React.createElement(\"div\", {\n            key: i,\n            className: obj.user_id === user_id ? 'yours messages' : 'mine messages',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'message',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, \" \", obj.message, \" \")));\n        });\n      }\n    }\n\n    return user ? React.createElement(Modal, {\n      className: 'ModalChat',\n      size: 'tiny',\n      open: showModal,\n      onClose: this.handleClose,\n      closeIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: 'HeaderChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, userOnline(), \" \", ' ', React.createElement(\"span\", {\n      className: 'chatUserBadge',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, user.firstname)), React.createElement(Modal.Content, {\n      scrolling: true,\n      className: 'ModalChatContent',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'messagesRows',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.innerRefScroll,\n      className: 'chat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, messagesRows()))), React.createElement(Modal.Actions, {\n      className: 'inputChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      action: {\n        icon: 'send'\n      },\n      fluid: true // ref={this.innerRef}\n      ,\n      value: message,\n      onChange: this.handleChange,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })))) : null;\n  }\n\n}\n\nexport default ModalChat;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js"],"names":["React","Form","Modal","Input","Icon","API","ModalChat","Component","constructor","props","handleOpen","user","_mounted","setState","showModal","getMessages","user_id","then","res","status","messages","data","innerRefScroll","current","scrollIntoView","behavior","block","inline","handleClose","handleSend","message","state","length","sendMessage","addMessage","s_message_send","user_id_emitter","user_id_receiver","push","user_id_dest","timestamp","Date","getDate","handleChange","e","value","createRef","componentDidMount","componentWillUnmount","render","userOnline","online","messagesRows","map","obj","i","firstname","icon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,IAA7B,QAAyC,mBAAzC;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAoBlBC,UApBkB,GAoBL,MAAMC,IAAN,IAAe;AACxB,WAAKC,QAAL,IAAiB,KAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAE,IAAZ;AAAkBH,QAAAA,IAAI,EAAEA;AAAxB,OAAd,CAAjB;AACA,YAAMN,GAAG,CAACU,WAAJ,CAAgBJ,IAAI,CAACK,OAArB,EACDC,IADC,CACIC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EACI,KAAKP,QAAL,IAAiB,KAAKC,QAAL,CAAc;AAACO,UAAAA,QAAQ,EAAEF,GAAG,CAACG,IAAJ,CAASD;AAApB,SAAd,EAA6C,MAAM;AAChE,eAAKE,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,OAA3C,IAAsD,KAAKD,cAAL,CAAoBC,OAApB,CAA4BC,cAA5B,CAA2C;AAC7FC,YAAAA,QAAQ,EAAE,QADmF;AAE7FC,YAAAA,KAAK,EAAE,KAFsF;AAG7FC,YAAAA,MAAM,EAAE;AAHqF,WAA3C,CAAtD;AAKH,SANgB,CAAjB;AAOP,OAVC,CAAN;AAWH,KAjCiB;;AAAA,SAkClBC,WAlCkB,GAkCJ,MAAM;AAAC,WAAKhB,QAAL,IAAiB,KAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAE,KAAZ;AAAmBH,QAAAA,IAAI,EAAE,EAAzB;AAA6BS,QAAAA,QAAQ,EAAE;AAAvC,OAAd,CAAjB;AAA2E,KAlC9E;;AAAA,SAmClBS,UAnCkB,GAmCL,YAAW;AACpB,YAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAA3B;AACA,YAAMd,OAAO,GAAG,KAAKe,KAAL,CAAWpB,IAAX,CAAgBK,OAAhC,CAFoB,CAGpB;;AACA,UAAIc,OAAO,IAAIA,OAAO,CAACE,MAAvB,EACI,MAAM3B,GAAG,CAAC4B,WAAJ,CAAgBjB,OAAhB,EAAyBc,OAAzB,EACDb,IADC,CACIC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,eAAKe,UAAL,CAAgBJ,OAAhB,EAAyB,IAAzB;AACA,eAAKlB,QAAL,IAAiB,KAAKH,KAAL,CAAW0B,cAAX,CAA0BnB,OAA1B,EAAmCc,OAAnC,CAAjB;AACH;AACJ,OANC,CAAN;AAOP,KA/CiB;;AAAA,SAiDlBI,UAjDkB,GAiDL,CAACJ,OAAD,EAAUM,eAAV,EAA2BC,gBAA3B,KAAgD;AACzD,UAAIjB,QAAQ,GAAG,KAAKW,KAAL,CAAWX,QAA1B;AACAA,MAAAA,QAAQ,CAACkB,IAAT,CAAc;AACVtB,QAAAA,OAAO,EAAEoB,eADC;AAEVG,QAAAA,YAAY,EAAEF,gBAFJ;AAGVG,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAHD;AAIVZ,QAAAA,OAAO,EAAEA;AAJC,OAAd;AAMA,WAAKlB,QAAL,IAAiB,KAAKC,QAAL,CAAc;AAACO,QAAAA,QAAQ,EAAEA,QAAX;AAAqBU,QAAAA,OAAO,EAAE;AAA9B,OAAd,EAAiD,MAAM;AACpE,aAAKR,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,OAA3C,IAAsD,KAAKD,cAAL,CAAoBC,OAApB,CAA4BC,cAA5B,CAA2C;AAC7FC,UAAAA,QAAQ,EAAE,QADmF;AAE7FC,UAAAA,KAAK,EAAE,KAFsF;AAG7FC,UAAAA,MAAM,EAAE;AAHqF,SAA3C,CAAtD;AAKH,OANgB,CAAjB;AAOH,KAhEiB;;AAAA,SAkElBgB,YAlEkB,GAkEH,CAACC,CAAD,EAAI;AAAEC,MAAAA;AAAF,KAAJ,KAAiB;AAAE,WAAKjC,QAAL,IAAiB,KAAKC,QAAL,CAAc;AAACiB,QAAAA,OAAO,EAAEe;AAAV,OAAd,CAAjB;AAAmD,KAlEnE;;AAEd,SAAKjC,QAAL,GAAgB,KAAhB;AACA,SAAKmB,KAAL,GAAa;AACTjB,MAAAA,SAAS,EAAE,KADF;AAETH,MAAAA,IAAI,EAAE,EAFG;AAGTS,MAAAA,QAAQ,EAAE,EAHD;AAITU,MAAAA,OAAO,EAAE;AAJA,KAAb;AAMA,SAAKR,cAAL,GAAsBtB,KAAK,CAAC8C,SAAN,EAAtB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKnC,QAAL,GAAgB,IAAhB;AACH;;AACDoC,EAAAA,oBAAoB,GAAG;AACnB,SAAKpC,QAAL,GAAgB,KAAhB;AACH,GAlBmC,CAoBpC;;;AAiDAqC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAEnC,MAAAA,SAAF;AAAaH,MAAAA,IAAb;AAAmBS,MAAAA,QAAnB;AAA6BU,MAAAA;AAA7B,QAAyC,KAAKC,KAApD;;AACA,aAASmB,UAAT,GAAsB;AAClB,UAAIvC,IAAI,CAACwC,MAAT,EACI,OAAO;AAAM,QAAA,SAAS,EAAE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAgC,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhC,MAAP,CADJ,KAGI,OAAO;AAAM,QAAA,SAAS,EAAE,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAwC,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAxC,MAAP;AACP;;AACD,aAASC,YAAT,GAAwB;AACpB,UAAIpC,OAAO,GAAGL,IAAI,CAACK,OAAnB;;AACA,UAAII,QAAQ,IAAIA,QAAQ,CAACY,MAAzB,EAAgC;AAC5B,eAAOZ,QAAQ,CAACiC,GAAT,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC7B,iBACI;AAAK,YAAA,GAAG,EAAEA,CAAV;AAAa,YAAA,SAAS,EAAED,GAAG,CAACtC,OAAJ,KAAgBA,OAAhB,GAA0B,gBAA1B,GAA6C,eAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAM,YAAA,SAAS,EAAE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAKsC,GAAG,CAACxB,OAAT,MADJ,CADJ,CADJ;AAOH,SARM,CAAP;AASH;AACJ;;AACD,WACInB,IAAI,GACA,oBAAC,KAAD;AACI,MAAA,SAAS,EAAE,WADf;AAEI,MAAA,IAAI,EAAE,MAFV;AAGI,MAAA,IAAI,EAAEG,SAHV;AAII,MAAA,OAAO,EAAE,KAAKc,WAJlB;AAKI,MAAA,SAAS,MALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,SAAS,EAAE,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKsB,UAAU,EADf,OACoB,GADpB,EAEI;AAAM,MAAA,SAAS,EAAE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCvC,IAAI,CAAC6C,SAAxC,CAFJ,CANJ,EAUI,oBAAC,KAAD,CAAO,OAAP;AAAe,MAAA,SAAS,MAAxB;AAAyB,MAAA,SAAS,EAAE,kBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKlC,cAAf;AAA+B,MAAA,SAAS,EAAE,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS8B,YAAY,EADrB,CADJ,CADJ,CAVJ,EAiBI,oBAAC,KAAD,CAAO,OAAP;AAAe,MAAA,SAAS,EAAE,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKvB,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,MAAM,EAAE;AAAE4B,QAAAA,IAAI,EAAE;AAAR,OAFZ;AAGI,MAAA,KAAK,MAHT,CAII;AAJJ;AAKI,MAAA,KAAK,EAAE3B,OALX;AAMI,MAAA,QAAQ,EAAE,KAAKa,YANnB;AAOI,MAAA,WAAW,EAAC,mBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADR,CAjBJ,CADA,GA+BW,IAhCnB;AAkCH;;AA7HmC;;AAgIxC,eAAerC,SAAf","sourcesContent":["import React from 'react';\nimport { Form, Modal, Input, Icon } from 'semantic-ui-react'\nimport API from '../../utils/API';\n\nclass ModalChat extends React.Component {\n    constructor(props){\n        super(props);\n        this._mounted = false;\n        this.state = {\n            showModal: false,\n            user: [],\n            messages: [],\n            message: ''\n        };\n        this.innerRefScroll = React.createRef();\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    // Outside Ref\n    handleOpen = async(user) => {\n        this._mounted && this.setState({showModal: true, user: user});\n        await API.getMessages(user.user_id)\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({messages: res.data.messages}, () => {\n                        this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n                            behavior: 'smooth',\n                            block: 'end',\n                            inline: 'end',\n                        });\n                    });\n            })\n    };\n    handleClose = () => {this._mounted && this.setState({showModal: false, user: [], messages: []})};\n    handleSend = async() => {\n        const message = this.state.message;\n        const user_id = this.state.user.user_id;\n        // Clear value in input\n        if (message && message.length)\n            await API.sendMessage(user_id, message)\n                .then(res => {\n                    if (res.status === 200) {\n                        this.addMessage(message, true);\n                        this._mounted && this.props.s_message_send(user_id, message);\n                    }\n                })\n    };\n\n    addMessage = (message, user_id_emitter, user_id_receiver) => {\n        let messages = this.state.messages;\n        messages.push({\n            user_id: user_id_emitter,\n            user_id_dest: user_id_receiver,\n            timestamp: new Date().getDate(),\n            message: message\n        });\n        this._mounted && this.setState({messages: messages, message: ''}, () => {\n            this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end',\n            });\n        });\n    };\n\n    handleChange = (e, { value}) => { this._mounted && this.setState({message: value}); };\n\n    render(){\n        const { showModal, user, messages, message } = this.state;\n        function userOnline() {\n            if (user.online)\n                return <span className={'OnlineChat'}> <Icon name={'circle'}/> </span>;\n            else\n                return <span className={'LastConnectionChat'}> <Icon name={'circle'}/> </span>\n        }\n        function messagesRows() {\n            let user_id = user.user_id;\n            if (messages && messages.length){\n                return messages.map( (obj, i) => {\n                    return (\n                        <div key={i} className={obj.user_id === user_id ? 'yours messages' : 'mine messages'}>\n                            <div  className={'message'}>\n                                <p> {obj.message} </p>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        }\n        return (\n            user ?\n                <Modal\n                    className={'ModalChat'}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    closeIcon >\n                    <Modal.Header className={'HeaderChat'}>\n                        {userOnline()} {' '}\n                        <span className={'chatUserBadge'}>{user.firstname}</span>\n                    </Modal.Header>\n                    <Modal.Content scrolling className={'ModalChatContent'}>\n                        <div className={'messagesRows'}>\n                            <div ref={this.innerRefScroll} className={'chat'}>\n                                    {messagesRows()}\n                            </div>\n                        </div>\n                    </Modal.Content>\n                    <Modal.Actions className={'inputChat'}>\n                            <Form onSubmit={this.handleSend}>\n                                <Input\n                                    size='large'\n                                    action={{ icon: 'send' }}\n                                    fluid\n                                    // ref={this.innerRef}\n                                    value={message}\n                                    onChange={this.handleChange}\n                                    placeholder='Type a message...'\n                                />\n                            </Form>\n                    </Modal.Actions>\n                </Modal> : null\n        )\n    }\n}\n\nexport default ModalChat;"]},"metadata":{},"sourceType":"module"}