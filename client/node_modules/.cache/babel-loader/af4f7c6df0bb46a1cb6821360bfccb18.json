{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.getAutoControlledStateValue = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _startsWith2 = _interopRequireDefault(require(\"lodash/startsWith\"));\n\nvar _filter2 = _interopRequireDefault(require(\"lodash/filter\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _keys2 = _interopRequireDefault(require(\"lodash/keys\"));\n\nvar _intersection2 = _interopRequireDefault(require(\"lodash/intersection\"));\n\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\n\nvar _each2 = _interopRequireDefault(require(\"lodash/each\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _react = require(\"react\");\n\nvar getDefaultPropName = function getDefaultPropName(prop) {\n  return \"default\".concat(prop[0].toUpperCase() + prop.slice(1));\n};\n/**\n * Return the auto controlled state value for a give prop. The initial value is chosen in this order:\n *  - regular props\n *  - then, default props\n *  - then, initial state\n *  - then, `checked` defaults to false\n *  - then, `value` defaults to '' or [] if props.multiple\n *  - else, undefined\n *\n *  @param {string} propName A prop name\n *  @param {object} [props] A props object\n *  @param {object} [state] A state object\n *  @param {boolean} [includeDefaults=false] Whether or not to heed the default props or initial state\n */\n\n\nvar getAutoControlledStateValue = function getAutoControlledStateValue(propName, props, state) {\n  var includeDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false; // regular props\n\n  var propValue = props[propName];\n  if (propValue !== undefined) return propValue;\n\n  if (includeDefaults) {\n    // defaultProps\n    var defaultProp = props[getDefaultPropName(propName)];\n    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined\n\n    if (state) {\n      var initialState = state[propName];\n      if (initialState !== undefined) return initialState;\n    }\n  } // React doesn't allow changing from uncontrolled to controlled components,\n  // default checked/value if they were not present.\n\n\n  if (propName === 'checked') return false;\n  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined\n};\n\nexports.getAutoControlledStateValue = getAutoControlledStateValue;\n\nvar AutoControlledComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(AutoControlledComponent, _Component);\n\n  function AutoControlledComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, AutoControlledComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(AutoControlledComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"trySetState\", function (state, callback) {\n      var newState = Object.keys(state).reduce(function (acc, prop) {\n        // ignore props defined by the parent\n        if (_this.props[prop] !== undefined) return acc;\n        acc[prop] = state[prop];\n        return acc;\n      }, {});\n      if (Object.keys(newState).length > 0) _this.setState(newState, callback);\n    });\n    var autoControlledProps = _this.constructor.autoControlledProps;\n\n    var _state = (0, _invoke2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), 'getInitialAutoControlledState', _this.props) || {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      var _this$constructor = _this.constructor,\n          defaultProps = _this$constructor.defaultProps,\n          name = _this$constructor.name,\n          propTypes = _this$constructor.propTypes; // require static autoControlledProps\n\n      if (!autoControlledProps) {\n        console.error(\"Auto controlled \".concat(name, \" must specify a static autoControlledProps array.\"));\n      } // require propTypes\n\n\n      (0, _each2[\"default\"])(autoControlledProps, function (prop) {\n        var defaultProp = getDefaultPropName(prop); // regular prop\n\n        if (!(0, _has2[\"default\"])(propTypes, defaultProp)) {\n          console.error(\"\".concat(name, \" is missing \\\"\").concat(defaultProp, \"\\\" propTypes validation for auto controlled prop \\\"\").concat(prop, \"\\\".\"));\n        } // its default prop\n\n\n        if (!(0, _has2[\"default\"])(propTypes, prop)) {\n          console.error(\"\".concat(name, \" is missing propTypes validation for auto controlled prop \\\"\").concat(prop, \"\\\".\"));\n        }\n      }); // prevent autoControlledProps in defaultProps\n      //\n      // When setting state, auto controlled props values always win (so the parent can manage them).\n      // It is not reasonable to decipher the difference between props from the parent and defaultProps.\n      // Allowing defaultProps results in trySetState always deferring to the defaultProp value.\n      // Auto controlled props also listed in defaultProps can never be updated.\n      //\n      // To set defaults for an AutoControlled prop, you can set the initial state in the\n      // constructor or by using an ES7 property initializer:\n      // https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers\n\n      var illegalDefaults = (0, _intersection2[\"default\"])(autoControlledProps, (0, _keys2[\"default\"])(defaultProps));\n\n      if (!(0, _isEmpty2[\"default\"])(illegalDefaults)) {\n        console.error(['Do not set defaultProps for autoControlledProps. You can set defaults by', 'setting state in the constructor or using an ES7 property initializer', '(https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers)', \"See \".concat(name, \" props: \\\"\").concat(illegalDefaults, \"\\\".\")].join(' '));\n      } // prevent listing defaultProps in autoControlledProps\n      //\n      // Default props are automatically handled.\n      // Listing defaults in autoControlledProps would result in allowing defaultDefaultValue props.\n\n\n      var illegalAutoControlled = (0, _filter2[\"default\"])(autoControlledProps, function (prop) {\n        return (0, _startsWith2[\"default\"])(prop, 'default');\n      });\n\n      if (!(0, _isEmpty2[\"default\"])(illegalAutoControlled)) {\n        console.error(['Do not add default props to autoControlledProps.', 'Default props are automatically handled.', \"See \".concat(name, \" autoControlledProps: \\\"\").concat(illegalAutoControlled, \"\\\".\")].join(' '));\n      }\n    } // Auto controlled props are copied to state.\n    // Set initial state by copying auto controlled props to state.\n    // Also look for the default prop for any auto controlled props (foo => defaultFoo)\n    // so we can set initial values from defaults.\n\n\n    var initialAutoControlledState = autoControlledProps.reduce(function (acc, prop) {\n      acc[prop] = getAutoControlledStateValue(prop, _this.props, _state, true);\n\n      if (process.env.NODE_ENV !== 'production') {\n        var defaultPropName = getDefaultPropName(prop);\n        var _name = _this.constructor.name; // prevent defaultFoo={} along side foo={}\n\n        if (!(0, _isUndefined2[\"default\"])(_this.props[defaultPropName]) && !(0, _isUndefined2[\"default\"])(_this.props[prop])) {\n          console.error(\"\".concat(_name, \" prop \\\"\").concat(prop, \"\\\" is auto controlled. Specify either \").concat(defaultPropName, \" or \").concat(prop, \", but not both.\"));\n        }\n      }\n\n      return acc;\n    }, {});\n    _this.state = (0, _objectSpread2[\"default\"])({}, _state, initialAutoControlledState);\n    return _this;\n  } // eslint-disable-next-line camelcase\n\n\n  (0, _createClass2[\"default\"])(AutoControlledComponent, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var autoControlledProps = this.constructor.autoControlledProps; // Solve the next state for autoControlledProps\n\n      var newState = autoControlledProps.reduce(function (acc, prop) {\n        var isNextDefined = !(0, _isUndefined2[\"default\"])(nextProps[prop]); // if next is defined then use its value\n\n        if (isNextDefined) acc[prop] = nextProps[prop];\n        return acc;\n      }, {});\n      if (Object.keys(newState).length > 0) this.setState(newState);\n    }\n    /**\n     * Safely attempt to set state for props that might be controlled by the user.\n     * Second argument is a state object that is always passed to setState.\n     * @param {object} state State that corresponds to controlled props.\n     * @param {function} [callback] Callback which is called after setState applied.\n     */\n\n  }]);\n  return AutoControlledComponent;\n}(_react.Component);\n\nexports[\"default\"] = AutoControlledComponent;","map":null,"metadata":{},"sourceType":"script"}