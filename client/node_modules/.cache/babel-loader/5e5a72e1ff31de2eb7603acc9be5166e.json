{"ast":null,"code":"import _defineProperty from \"/Users/jeguglie/Desktop/MatchApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jeguglie/Desktop/MatchApp/client/src/containers/Wall/Wall.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport UserMiniCard from \"../../components/UserMiniCard/UserMiniCard\";\nimport API from './../../utils/API';\nimport InputRange from 'react-input-range';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Interests from \"../../components/EditProfil/AddInterests/Interests/Interests\";\nimport { Header, Image, Modal, Dimmer, Loader, Grid, Rail, Segment, Divider, Checkbox, Portal, Label, Icon } from \"semantic-ui-react\";\nimport 'react-input-range/lib/css/index.css';\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport _ from \"lodash\";\nconst DEFAULT_STATE = {\n  user: {\n    lastname: '',\n    firstname: '',\n    interests: [],\n    gender: [],\n    interested: [],\n    imgs: [],\n    country: '',\n    bio: '',\n    age: '',\n    likes: ''\n  },\n  loadingModal: '',\n  nextUsers: '',\n  showModal: false,\n  hasMoreContent: false,\n  userIdFocus: 0,\n  clear: false,\n  users: [],\n  warnings: [],\n  loading: false,\n  interests: [],\n  distanceRange: 250,\n  ageRange: {\n    min: 19,\n    max: 27\n  },\n  popularityRange: {\n    min: 0,\n    max: 50\n  }\n};\n\nclass Wall extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = _objectSpread({}, DEFAULT_STATE);\n\n    this.componentDidMount = async () => {\n      this.setState({\n        loading: true\n      }); // Check if user can view users\n\n      await API.checkUserView().then(res => {\n        this.canView = res.status === 200;\n      }).catch(() => {\n        this.props.history.push('/');\n      });\n      if (!this.canView) this.props.history.push('/');\n      await this.searchMatch();\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handleChange = async (value, id) => {\n      if (id === \"distanceRange\") this.setState({\n        distanceRange: value\n      });else if (id === \"ageRange\") this.setState({\n        ageRange: value\n      });else if (id === \"popularityRange\") this.setState({\n        popularityRange: value\n      });\n    };\n\n    this.searchMatch = async () => {\n      this.setState({\n        loading: true\n      });\n      const _this$state = this.state,\n            distanceRange = _this$state.distanceRange,\n            ageRange = _this$state.ageRange,\n            popularityRange = _this$state.popularityRange;\n      let users = []; // Get users\n\n      await API.getUsers(distanceRange, ageRange, popularityRange).then(response => {\n        if (response.status === 200) users = response.data.users;\n      }).catch(error => {\n        if (typeof error.response !== 'undefined') this.setState({\n          warnings: error.response.data.warnings\n        });\n      });\n      let nextUsers = 0;\n      if (users.length > 20) nextUsers = users.slice(21);\n      this.setState({\n        nextUsers: nextUsers,\n        users: users.slice(0, 21),\n        hasMoreContent: users.length > 20\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.clickedUser = async userIdFocus => {\n      await API.getUserIdProfile(userIdFocus).then(res => {\n        if (res.status === 200) {\n          this.setState({\n            user: res.data.user,\n            userIdFocus: userIdFocus,\n            showModal: true\n          });\n          console.log(res.data.user);\n        }\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        userIdFocus: null,\n        showModal: false\n      });\n    };\n\n    this.handleBottomPage = () => {\n      const _this$state2 = this.state,\n            nextUsers = _this$state2.nextUsers,\n            users = _this$state2.users;\n\n      if (nextUsers.length) {\n        for (let i = 0; i < nextUsers.length && i <= 20; i++) users.push(nextUsers[i]);\n\n        this.setState({\n          users: users,\n          nextUsers: nextUsers.slice(21)\n        });\n      } else this.setState({\n        hasMoreContent: false\n      });\n    };\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          hasMoreContent = _this$state3.hasMoreContent,\n          user = _this$state3.user,\n          showModal = _this$state3.showModal,\n          users = _this$state3.users,\n          loading = _this$state3.loading,\n          distanceRange = _this$state3.distanceRange,\n          ageRange = _this$state3.ageRange,\n          popularityRange = _this$state3.popularityRange,\n          interests = _this$state3.interests;\n\n    const ModalUser = () => {\n      return React.createElement(Modal, {\n        dimmer: \"blurring\",\n        size: 'tiny',\n        open: showModal,\n        onClose: this.handleClose,\n        className: \"ModalCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        className: \"CardHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"CardHeaderTile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \" \", user.firstname, \" \", user.lastname, \", \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, user.age))), React.createElement(Modal.Content, {\n        className: \"ModalProfilView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        centered: true,\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        className: \"RowImages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Image, {\n        rounded: true,\n        size: \"medium\",\n        src: user.imgs[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(Grid.Row, {\n        className: \"RowImages\",\n        centered: true,\n        columns: user.imgs.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, user.imgs.map((img, i) => {\n        if (i > 0) return React.createElement(Grid.Column, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(Image, {\n          rounded: true,\n          size: \"small\",\n          src: user.imgs[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }));\n      }))), React.createElement(Modal.Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        className: \"BioSegment\",\n        textAlign: \"center\",\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, user.bio)), React.createElement(Segment, {\n        className: \"CardUserActions\",\n        basic: true,\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"huge\",\n        id: \"like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Like\"), React.createElement(Button.Or, {\n        text: \"or\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(Button, {\n        size: \"huge\",\n        id: \"hide\",\n        positive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Hide\"))), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(Label.Group, {\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), user.interests.map((data, i) => {\n        return React.createElement(Label, {\n          className: \"interestLabel\",\n          id: i,\n          key: i,\n          data: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, \"#\"), data);\n      })))));\n    };\n\n    return React.createElement(\"div\", {\n      className: \"WallContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(ModalUser, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Dimmer, {\n      active: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      size: \"massive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      centered: true,\n      columns: 'equal',\n      stackable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      mobile: 16,\n      tablet: 6,\n      computer: 6,\n      largeScreen: 4,\n      widescreen: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      inverted: true,\n      className: \"SegmentFilter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"filterContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"DistanceRangeContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"DistanceRangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Distance\"), \" \", React.createElement(\"span\", {\n      className: \"RangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \" 0 - \", distanceRange, \" km\")))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(InputRange, {\n      draggableTrack: true,\n      maxValue: 5000,\n      minValue: 0,\n      onChange: value => this.handleChange(value, \"distanceRange\"),\n      formatLabel: value => \"\".concat(value, \" km\"),\n      value: distanceRange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"DistanceRangeContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"DistanceRangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Age\"), \" \", React.createElement(\"span\", {\n      className: \"RangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \" \", ageRange.min, \" - \", ageRange.max)))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(InputRange, {\n      draggableTrack: true,\n      maxValue: 99,\n      minValue: 18,\n      onChange: value => this.handleChange(value, \"ageRange\"),\n      value: ageRange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"DistanceRangeContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"DistanceRangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Popularity\"), \" \", React.createElement(\"span\", {\n      className: \"RangeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \" \", popularityRange.min, \" - \", popularityRange.max)))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(InputRange, {\n      draggableTrack: true,\n      maxValue: 500,\n      minValue: 0,\n      onChange: value => this.handleChange(value, \"popularityRange\"),\n      value: popularityRange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      className: \"IncludeInterestsTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      label: \"Include my interests\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Interests, {\n      interests: interests,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(Grid.Row, {\n      className: \"ButtonSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: \"search\",\n      size: \"huge\",\n      onClick: this.searchMatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Search\"))))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      stackable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(UserMiniCard, {\n      users: users,\n      clickedUser: this.clickedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })))), React.createElement(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: this.handleBottomPage,\n      hasMore: hasMoreContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \" \"));\n  }\n\n}\n\nexport default Wall;","map":{"version":3,"sources":["/Users/jeguglie/Desktop/MatchApp/client/src/containers/Wall/Wall.js"],"names":["React","UserMiniCard","API","InputRange","InfiniteScroll","Interests","Header","Image","Modal","Dimmer","Loader","Grid","Rail","Segment","Divider","Checkbox","Portal","Label","Icon","Button","_","DEFAULT_STATE","user","lastname","firstname","interests","gender","interested","imgs","country","bio","age","likes","loadingModal","nextUsers","showModal","hasMoreContent","userIdFocus","clear","users","warnings","loading","distanceRange","ageRange","min","max","popularityRange","Wall","Component","state","componentDidMount","setState","checkUserView","then","res","canView","status","catch","props","history","push","searchMatch","handleChange","value","id","getUsers","response","data","error","length","slice","clickedUser","getUserIdProfile","console","log","handleClose","handleBottomPage","i","render","ModalUser","map","img"],"mappings":"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","sourcesContent":["import React from 'react';\nimport UserMiniCard from \"../../components/UserMiniCard/UserMiniCard\";\nimport API from './../../utils/API';\nimport InputRange from 'react-input-range';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Interests from \"../../components/EditProfil/AddInterests/Interests/Interests\";\nimport {\n    Header,\n    Image,\n    Modal,\n    Dimmer,\n    Loader,\n    Grid,\n    Rail,\n    Segment,\n    Divider,\n    Checkbox,\n    Portal,\n    Label,\n    Icon\n} from \"semantic-ui-react\";\nimport 'react-input-range/lib/css/index.css';\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport _ from \"lodash\";\n\nconst DEFAULT_STATE = {\n    user: {\n        lastname: '',\n        firstname: '',\n        interests: [],\n        gender: [],\n        interested: [],\n        imgs: [],\n        country: '',\n        bio: '',\n        age: '',\n        likes: ''\n    },\n    loadingModal: '',\n    nextUsers: '',\n    showModal: false,\n    hasMoreContent: false,\n    userIdFocus: 0,\n    clear: false,\n    users: [],\n    warnings: [],\n    loading: false,\n    interests: [],\n    distanceRange: 250,\n    ageRange: {\n        min: 19,\n        max: 27,\n    },\n    popularityRange: {\n        min: 0,\n        max: 50,\n    }\n};\nclass Wall extends React.Component {\n\n    state = {...DEFAULT_STATE};\n    componentDidMount = async() => {\n\n        this.setState({loading: true});\n        // Check if user can view users\n        await API.checkUserView()\n            .then(res => { this.canView = res.status === 200 })\n            .catch(() => { this.props.history.push('/') });\n        if(!this.canView)\n            this.props.history.push('/')\n        await this.searchMatch();\n        this.setState({loading: false});\n    };\n\n    // Filter\n    handleChange = async(value, id) => {\n        if (id === \"distanceRange\")\n            this.setState({distanceRange: value});\n        else if (id === \"ageRange\")\n            this.setState({ageRange: value});\n        else if (id === \"popularityRange\")\n            this.setState({popularityRange: value});\n    };\n\n    // Search button handle\n    searchMatch = async() => {\n        this.setState({loading: true});\n        const {distanceRange, ageRange, popularityRange } = this.state;\n        let users = [];\n        // Get users\n        await API.getUsers(distanceRange, ageRange, popularityRange)\n            .then(response => {\n                if (response.status === 200)\n                    users = response.data.users;\n            })\n            .catch(error => {\n                if(typeof error.response !== 'undefined')\n                    this.setState({warnings : error.response.data.warnings})\n            });\n        let nextUsers = 0;\n        if(users.length > 20)\n           nextUsers = users.slice(21);\n        this.setState({\n            nextUsers: nextUsers,\n            users: users.slice(0, 21),\n            hasMoreContent: users.length > 20\n        });\n        this.setState({loading: false});\n\n    };\n\n    // Cliked user handle\n    clickedUser = async(userIdFocus) => {\n        await API.getUserIdProfile(userIdFocus)\n            .then(res => {\n                if (res.status === 200){\n                    this.setState({\n                        user: res.data.user,\n                        userIdFocus: userIdFocus,\n                        showModal: true\n                    });\n                    console.log(res.data.user);\n                }\n            })\n    };\n    handleClose = () => {\n        this.setState({ userIdFocus: null, showModal: false})\n    }\n\n    handleBottomPage = () => {\n        const { nextUsers, users } = this.state;\n        if (nextUsers.length){\n            for (let i = 0; i < nextUsers.length && i <= 20; i++)\n                users.push(nextUsers[i]);\n            this.setState({users: users, nextUsers: nextUsers.slice(21)});\n        }\n        else\n            this.setState({hasMoreContent: false});\n    }\n    render() {\n        const { hasMoreContent, user, showModal, users, loading, distanceRange, ageRange, popularityRange, interests } = this.state;\n        const ModalUser = () => {\n            return (\n                <Modal\n                    dimmer={\"blurring\"}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    className=\"ModalCard\"\n                >\n                    <Modal.Header className=\"CardHeader\"><h1 className=\"CardHeaderTile\"> {user.firstname} {user.lastname}, <strong>{user.age}</strong></h1></Modal.Header>\n                    <Modal.Content  className=\"ModalProfilView\" >\n                        <Modal.Header></Modal.Header>\n                        <Divider hidden/>\n                        <Grid centered columns={2}>\n                            <Grid.Column className=\"RowImages\">\n                                <Image rounded size='medium' src={user.imgs[0]} />\n                            </Grid.Column>\n                            <Grid.Row className=\"RowImages\" centered columns={user.imgs.length}>\n                                {user.imgs.map((img, i) => {\n                                    if (i > 0)\n                                        return (\n                                            <Grid.Column>\n                                                <Image rounded size='small' src={user.imgs[i]}/>\n                                            </Grid.Column>\n                                        )\n                                })}\n                            </Grid.Row>\n                        </Grid>\n                        <Modal.Description>\n                            <Segment  className=\"BioSegment\" textAlign=\"center\" inverted>\n                                <p>{user.bio}</p>\n                            </Segment>\n                                <Segment className=\"CardUserActions\" basic textAlign=\"center\">\n                                    <Button.Group>\n                                        <Button size='huge' id=\"like\">Like</Button>\n                                        <Button.Or text='or' />\n                                        <Button size='huge' id=\"hide\" positive>Hide</Button>\n                                    </Button.Group>\n                                </Segment>\n                            <Divider hidden/>\n                            <Label.Group size='small'>\n                                <p />\n                                {user.interests.map((data, i) => {\n                                    return (\n                                        <Label className=\"interestLabel\"\n                                               id={i}\n                                               key={i}\n                                               data={data}>\n                                            <strong>#</strong>{data}</Label>\n                                    )\n                                })}\n                            </Label.Group>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n            )\n        }\n            return (\n                <div className=\"WallContainer\">\n                    <ModalUser />\n                    <Dimmer active={loading}>\n                        <Loader size='massive'/>\n                    </Dimmer>\n                    <Grid centered columns={'equal'} stackable>\n                        <Grid.Column mobile={16} tablet={6} computer={6} largeScreen={4} widescreen={3}>\n                            <Segment inverted className=\"SegmentFilter\">\n                            <div className=\"filterContainer\">\n                                <Grid.Row>\n                                    <Grid.Row>\n                                        <div className=\"DistanceRangeContainer\">\n                                            <h1 className=\"DistanceRangeTitle\"><strong>Distance</strong> <span className=\"RangeTitle\"> 0 - {distanceRange} km</span></h1>\n                                        </div>\n                                    </Grid.Row>\n                                    <Grid.Row>\n                                        <InputRange\n                                            draggableTrack\n                                            maxValue={5000}\n                                            minValue={0}\n                                            onChange={value => this.handleChange(value, \"distanceRange\")}\n                                            formatLabel={value => `${value} km`}\n                                            value={distanceRange} />\n                                    </Grid.Row>\n                                </Grid.Row>\n                                <Divider hidden/>\n                                <Grid.Row>\n                                    <Grid.Row>\n                                        <div className=\"DistanceRangeContainer\">\n                                            <h1 className=\"DistanceRangeTitle\"><strong>Age</strong> <span className=\"RangeTitle\"> {ageRange.min} - {ageRange.max}</span></h1>\n                                        </div>\n                                    </Grid.Row>\n                                    <Grid.Row>\n                                        <InputRange\n                                            draggableTrack\n                                            maxValue={99}\n                                            minValue={18}\n                                            onChange={value => this.handleChange(value, \"ageRange\")}\n                                            value={ageRange} />\n                                    </Grid.Row>\n                                </Grid.Row>\n                                <Divider hidden/>\n                                <Grid.Row>\n                                    <Grid.Row>\n                                        <div className=\"DistanceRangeContainer\">\n                                            <h1 className=\"DistanceRangeTitle\"><strong>Popularity</strong> <span className=\"RangeTitle\"> {popularityRange.min} - {popularityRange.max}</span></h1>\n                                        </div>\n                                    </Grid.Row>\n                                    <Grid.Row>\n                                        <InputRange\n                                            draggableTrack\n                                            maxValue={500}\n                                            minValue={0}\n                                            onChange={value => this.handleChange(value, \"popularityRange\")}\n                                            value={popularityRange} />\n                                    </Grid.Row>\n                                </Grid.Row>\n                                <Divider hidden />\n                                <Divider />\n                                <Grid.Row className=\"IncludeInterestsTitle\">\n                                        <Checkbox label='Include my interests' defaultChecked />\n                                </Grid.Row>\n                                <Divider />\n                                <Grid.Row centered>\n                                    <Interests\n                                        interests={interests} />\n                                </Grid.Row>\n                                <Grid.Row className=\"ButtonSearch\">\n                                    <Button\n                                        id=\"search\"\n                                        size='huge'\n                                        onClick={this.searchMatch}>\n                                        Search\n                                    </Button>\n                                </Grid.Row>\n                            </div>\n                        </Segment>\n\n                    </Grid.Column>\n                            <Grid.Column>\n                                <Grid stackable  >\n                                    <UserMiniCard\n                                        users={users}\n                                        clickedUser={this.clickedUser}\n                                    />\n                                </Grid>\n                            </Grid.Column>\n                    </Grid>\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={this.handleBottomPage}\n                        hasMore={hasMoreContent}\n                    > </InfiniteScroll>\n                </div>\n            );\n    }\n}\n\n\nexport default Wall;"]},"metadata":{},"sourceType":"module"}