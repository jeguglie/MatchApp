{"ast":null,"code":"import _objectSpread from \"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js\";\nimport { Divider, Grid, Image, Label, Modal, Segment, Icon } from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport ModalUserActions from \"./ModalUserActions\";\nimport API from \"../../utils/API\";\nconst DEFAULT_STATE = {\n  openHide: false,\n  openReport: false,\n  openFake: false\n};\n\nclass ModalUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this._mounted = true;\n    };\n\n    this.componentDidUpdate = async prevProps => {\n      if (!equal(this.props.showModal, prevProps.showModal)) await API.getUserIdProfile(userIdFocus).then(res => {\n        if (res.status === 200) {\n          this._mounted && this.setState({\n            user: res.data.user,\n            userIdFocus: userIdFocus,\n            showModal: true\n          });\n        }\n      });\n    };\n\n    this.closeReport = () => {\n      this._mounted && this.setState({\n        openReport: false\n      });\n    };\n\n    this.openReport = () => {\n      this._mounted && this.setState({\n        openReport: true\n      });\n    };\n\n    this.closeFake = () => {\n      this._mounted && this.setState({\n        openFake: false\n      });\n    };\n\n    this.openFake = () => {\n      this._mounted && this.setState({\n        openFake: true\n      });\n    };\n\n    this.closeHide = () => {\n      this._mounted && this.setState({\n        openHide: false\n      });\n    };\n\n    this.openHide = () => {\n      this._mounted && this.setState({\n        openHide: true\n      });\n    };\n\n    this.state = _objectSpread({}, DEFAULT_STATE);\n    this._mounted = false;\n  }\n\n  componentWillUnmount() {\n    this._mounted && this.setState(_objectSpread({}, DEFAULT_STATE));\n    this._mounted = false;\n  } // Load user\n\n\n  render() {\n    const _this$props = this.props,\n          user = _this$props.user,\n          userInterests = _this$props.userInterests,\n          liked = _this$props.liked;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(ModalUserActions, {\n      openReport: this.state.openReport,\n      closeReport: this.closeReport,\n      openFake: this.state.openFake,\n      closeFake: this.closeFake,\n      openHide: this.state.openHide,\n      closeHide: this.closeHide,\n      userID: this.props.user.user_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      dimmer: \"blurring\",\n      size: 'tiny',\n      open: this.props.showModal,\n      onClose: this.props.handleClose,\n      className: \"ModalCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: \"CardHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"CardHeaderTile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" \", user.firstname, \" \", user.lastname, \", \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, user.age))), React.createElement(Modal.Content, {\n      className: \"ModalProfilView\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      className: \"RowImages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Image, {\n      rounded: true,\n      size: \"medium\",\n      src: user.imgs[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Grid.Row, {\n      className: \"RowImages\",\n      centered: true,\n      columns: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, user.imgs.map((img, i) => {\n      if (i > 0) return React.createElement(Grid.Column, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Image, {\n        rounded: true,\n        size: \"small\",\n        src: user.imgs[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n      return null;\n    }))), React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      className: \"BioSegment\",\n      textAlign: \"center\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, user.bio)), React.createElement(Segment, {\n      basic: true,\n      textAlign: 'center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      id: \"like\",\n      onClick: () => this.props.userLike(user.user_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), liked ? 'Unlike' : 'Like'), React.createElement(Button, {\n      size: \"small\",\n      id: \"hide\",\n      onClick: this.openHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), \"Hide\"), React.createElement(Button, {\n      size: \"small\",\n      id: \"fake\",\n      onClick: this.openFake,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user secret\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), \"Fake\"), React.createElement(Button, {\n      size: \"small\",\n      id: \"blockuser\",\n      onClick: this.openReport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), \"Signal\")), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Label.Group, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), user.interests.map((data, i) => {\n      return React.createElement(Label, {\n        className: userInterests.find(interest => interest === data) ? classnames(\"interestLabel\", \"sameInterest\") : \"interestLabel\",\n        id: i,\n        key: i,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"#\"), data);\n    }))))));\n  }\n\n}\n\nexport default ModalUser;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js"],"names":["Divider","Grid","Image","Label","Modal","Segment","Icon","Button","React","classnames","ModalUserActions","API","DEFAULT_STATE","openHide","openReport","openFake","ModalUser","Component","constructor","props","componentDidMount","_mounted","componentDidUpdate","prevProps","equal","showModal","getUserIdProfile","userIdFocus","then","res","status","setState","user","data","closeReport","closeFake","closeHide","state","componentWillUnmount","render","userInterests","liked","user_id","handleClose","firstname","lastname","age","imgs","map","img","i","bio","userLike","interests","find","interest"],"mappings":"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","sourcesContent":["import {Divider, Grid, Image, Label, Modal, Segment, Icon} from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport ModalUserActions from \"./ModalUserActions\";\nimport API from \"../../utils/API\";\n\nconst DEFAULT_STATE = {\n    openHide: false,\n    openReport: false,\n    openFake: false,\n};\n\nclass ModalUser extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {...DEFAULT_STATE};\n        this._mounted = false;\n    }\n\n    componentDidMount = async() => {\n        this._mounted = true;\n    };\n    componentWillUnmount() {\n        this._mounted && this.setState({...DEFAULT_STATE});\n        this._mounted = false;\n    }\n    // Load user\n    componentDidUpdate= async(prevProps) => {\n        if(!equal(this.props.showModal, prevProps.showModal))\n            await API.getUserIdProfile(userIdFocus)\n                .then(res => {\n                    if (res.status === 200){\n                        this._mounted && this.setState({\n                            user: res.data.user,\n                            userIdFocus: userIdFocus,\n                            showModal: true\n                        });\n                    }\n                });\n    }\n    // Modal user actions\n    closeReport = () => { this._mounted && this.setState({openReport: false})};\n    openReport = () => {this._mounted && this.setState({openReport: true})};\n    closeFake = () => { this._mounted && this.setState({openFake: false})};\n    openFake = () => {this._mounted && this.setState({openFake: true})};\n    closeHide = () => { this._mounted && this.setState({openHide: false})};\n    openHide = () => {this._mounted && this.setState({openHide: true})};\n    render() {\n        const {user, userInterests, liked } = this.props;\n        return (\n            <div>\n                <ModalUserActions\n                    openReport={this.state.openReport}\n                    closeReport={this.closeReport}\n                    openFake={this.state.openFake}\n                    closeFake={this.closeFake}\n                    openHide={this.state.openHide}\n                    closeHide={this.closeHide}\n                    userID={this.props.user.user_id}\n                />\n                <Modal\n                    dimmer={\"blurring\"}\n                    size={'tiny'}\n                    open={this.props.showModal}\n                    onClose={this.props.handleClose}\n                    className=\"ModalCard\">\n                    <Modal.Header className=\"CardHeader\"><h1\n                        className=\"CardHeaderTile\"> {user.firstname} {user.lastname}, <strong>{user.age}</strong></h1>\n                    </Modal.Header>\n                    <Modal.Content className=\"ModalProfilView\">\n                        <Modal.Header></Modal.Header>\n                        <Divider hidden/>\n                        <Grid centered columns={2}>\n                            <Grid.Column className=\"RowImages\">\n                                <Image rounded size='medium' src={user.imgs[0]}/>\n                            </Grid.Column>\n                            <Grid.Row className=\"RowImages\" centered columns={4}>\n                                {user.imgs.map((img, i) => {\n                                    if (i > 0)\n                                        return (\n                                            <Grid.Column key={i}>\n                                                <Image rounded size='small' src={user.imgs[i]}/>\n                                            </Grid.Column>\n                                        );\n                                    return null;\n                                })}\n                            </Grid.Row>\n                        </Grid>\n                        <Modal.Description>\n                            <Segment className=\"BioSegment\" textAlign=\"center\" inverted>\n                                <p>{user.bio}</p>\n                            </Segment>\n                            <Segment basic textAlign={'center'}>\n                                <Button size='small' id='like' onClick={() => this.props.userLike(user.user_id)}>\n                                    <Icon name='heart'/>\n                                    {liked ? 'Unlike' : 'Like'}\n                                </Button>\n                                <Button size='small' id='hide' onClick={this.openHide}>\n                                    <Icon name='user x'/>\n                                    Hide\n                                </Button>\n                                <Button size='small' id='fake' onClick={this.openFake}>\n                                    <Icon name='user secret'/>\n                                    Fake\n                                </Button>\n                                <Button size='small' id='blockuser' onClick={this.openReport}>\n                                    <Icon name='warning'/>\n                                    Signal\n                                </Button>\n                            </Segment>\n                            <Divider hidden/>\n                            <Label.Group size='small'>\n                                <p/>\n                                {user.interests.map((data, i) => {\n                                    return (\n                                        <Label\n                                            className={userInterests.find(interest => interest === data) ? classnames(\"interestLabel\",\"sameInterest\") : \"interestLabel\"}\n                                            id={i}\n                                            key={i}\n                                            data={data}>\n                                            <strong>#</strong>{data}</Label>\n                                    )\n                                })}\n                            </Label.Group>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default ModalUser;"]},"metadata":{},"sourceType":"module"}