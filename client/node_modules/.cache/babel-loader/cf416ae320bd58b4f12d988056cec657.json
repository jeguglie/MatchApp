{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js\";\nimport { Divider, Grid, Image, Label, Modal, Segment } from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport openSocket from 'socket.io-client';\nconst socket = openSocket('http://localhost:3002');\n\nclass ModalUser extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.userLike = async () => {\n      socket.emit(\"like\", this.props.user.user_id);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          user = _this$props.user,\n          userInterests = _this$props.userInterests;\n    return React.createElement(Modal, {\n      dimmer: \"blurring\",\n      size: 'tiny',\n      open: this.props.showModal,\n      onClose: this.props.handleClose,\n      className: \"ModalCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: \"CardHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"CardHeaderTile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \" \", user.firstname, \" \", user.lastname, \", \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, user.age))), React.createElement(Modal.Content, {\n      className: \"ModalProfilView\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      className: \"RowImages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Image, {\n      rounded: true,\n      size: \"medium\",\n      src: user.imgs[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })), React.createElement(Grid.Row, {\n      className: \"RowImages\",\n      centered: true,\n      columns: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, user.imgs.map((img, i) => {\n      if (i > 0) return React.createElement(Grid.Column, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Image, {\n        rounded: true,\n        size: \"small\",\n        src: user.imgs[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n      return null;\n    }))), React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      className: \"BioSegment\",\n      textAlign: \"center\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, user.bio)), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Label.Group, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), user.interests.map((data, i) => {\n      return React.createElement(Label, {\n        className: userInterests.find(interest => interest === data) ? classnames(\"interestLabel\", \"sameInterest\") : \"interestLabel\",\n        id: i,\n        key: i,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"#\"), data);\n    })))), React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Button.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      id: \"blockuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Like\"), React.createElement(Button, {\n      size: \"small\",\n      id: \"blockuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Hide\"), React.createElement(Button, {\n      size: \"small\",\n      id: \"blockuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Report as fake\"), React.createElement(Button, {\n      size: \"small\",\n      id: \"blockuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Signal\"))));\n  }\n\n}\n\nexport default ModalUser;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js"],"names":["Divider","Grid","Image","Label","Modal","Segment","Button","React","classnames","openSocket","socket","ModalUser","Component","userLike","emit","props","user","user_id","render","userInterests","showModal","handleClose","firstname","lastname","age","imgs","map","img","i","bio","interests","data","find","interest"],"mappings":"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","sourcesContent":["import {Divider, Grid, Image, Label, Modal, Segment} from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport openSocket from 'socket.io-client';\nconst  socket = openSocket('http://localhost:3002');\n\nclass ModalUser extends React.Component {\n\n    userLike = async() => {\n        socket.emit(\"like\", this.props.user.user_id);\n};\n    render() {\n        const {user, userInterests } = this.props;\n        return (\n            <Modal\n                dimmer={\"blurring\"}\n                size={'tiny'}\n                open={this.props.showModal}\n                onClose={this.props.handleClose}\n                className=\"ModalCard\">\n                <Modal.Header className=\"CardHeader\"><h1\n                    className=\"CardHeaderTile\"> {user.firstname} {user.lastname}, <strong>{user.age}</strong></h1>\n                </Modal.Header>\n                <Modal.Content className=\"ModalProfilView\">\n                    <Modal.Header></Modal.Header>\n                    <Divider hidden/>\n                    <Grid centered columns={2}>\n                        <Grid.Column className=\"RowImages\">\n                            <Image rounded size='medium' src={user.imgs[0]}/>\n                        </Grid.Column>\n                        <Grid.Row className=\"RowImages\" centered columns={4}>\n                            {user.imgs.map((img, i) => {\n                                if (i > 0)\n                                    return (\n                                        <Grid.Column key={i}>\n                                            <Image rounded size='small' src={user.imgs[i]}/>\n                                        </Grid.Column>\n                                    )\n                                return null;\n                            })}\n                        </Grid.Row>\n                    </Grid>\n                    <Modal.Description>\n                        <Segment className=\"BioSegment\" textAlign=\"center\" inverted>\n                            <p>{user.bio}</p>\n                        </Segment>\n                        {/*<Segment className=\"CardUserActions\" basic textAlign=\"center\">*/}\n                        {/*    <Button.Group>*/}\n                        {/*        <Button*/}\n                        {/*            size='huge'*/}\n                        {/*            id=\"like\"*/}\n                        {/*            onClick={this.userLike}>Like</Button>*/}\n                        {/*        <Button.Or text='or'/>*/}\n                        {/*        <Button size='huge' id=\"hide\" positive>Hide</Button>*/}\n                        {/*    </Button.Group>*/}\n                        {/*</Segment>*/}\n                        <Divider hidden/>\n                        <Label.Group size='small'>\n                            <p/>\n                            {user.interests.map((data, i) => {\n                                return (\n                                    <Label\n                                        className={userInterests.find(interest => interest === data) ? classnames(\"interestLabel\",\"sameInterest\") : \"interestLabel\"}\n                                        id={i}\n                                        key={i}\n                                        data={data}>\n                                        <strong>#</strong>{data}</Label>\n                                )\n                            })}\n                        </Label.Group>\n                    </Modal.Description>\n                </Modal.Content>\n                <Segment>\n                    <Button.Group>\n                        <Button size='small' id='blockuser'>Like</Button>\n                        <Button size='small' id='blockuser'>Hide</Button>\n                        <Button size='small' id='blockuser'>Report as fake</Button>\n                        <Button size='small' id='blockuser'>Signal</Button>\n                    </Button.Group>\n                </Segment>\n            </Modal>\n        )\n    }\n}\n\nexport default ModalUser;"]},"metadata":{},"sourceType":"module"}