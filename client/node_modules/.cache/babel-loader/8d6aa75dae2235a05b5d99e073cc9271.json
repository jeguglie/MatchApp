{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/utils/withAuth.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from '../utils/API';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nfunction withAuth(ComponentToProtect) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        loading: true,\n        redirect: false\n      };\n      console.log(this.props);\n    }\n\n    componentDidMount() {\n      this._mounted = true;\n      if (cookies.get('token')) API.withAuth().then(res => {\n        if (res.status === 200) {\n          this._mounted && this.setState({\n            loading: false\n          });\n        } else throw new Error(res.error);\n      }).catch(() => {\n        this._mounted && this.setState({\n          loading: false,\n          redirect: true\n        });\n      });else this._mounted && this.setState({\n        loading: false,\n        redirect: true\n      });\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    render() {\n      const _this$state = this.state,\n            loading = _this$state.loading,\n            redirect = _this$state.redirect;\n      if (loading) return null;\n      if (redirect) return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n      return React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    }\n\n  };\n}\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/utils/withAuth.js"],"names":["React","Redirect","API","Cookies","cookies","withAuth","ComponentToProtect","Component","constructor","props","state","loading","redirect","console","log","componentDidMount","_mounted","get","then","res","status","setState","Error","error","catch","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AAEA,SAASE,QAAT,CAAkBC,kBAAlB,EAAsC;AAClC,SAAO,cAAcN,KAAK,CAACO,SAApB,CAA8B;AACjCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,OAAO,EAAE,IADA;AAETC,QAAAA,QAAQ,EAAE;AAFD,OAAb;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACH;;AACDM,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,QAAL,GAAgB,IAAhB;AACA,UAAIZ,OAAO,CAACa,GAAR,CAAY,OAAZ,CAAJ,EACIf,GAAG,CAACG,QAAJ,GACKa,IADL,CACUC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,eAAKJ,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAACV,YAAAA,OAAO,EAAE;AAAV,WAAd,CAAjB;AACH,SAFD,MAII,MAAM,IAAIW,KAAJ,CAAUH,GAAG,CAACI,KAAd,CAAN;AACP,OAPL,EAQKC,KARL,CAQW,MAAM;AAAC,aAAKR,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAACV,UAAAA,OAAO,EAAE,KAAV;AAAiBC,UAAAA,QAAQ,EAAE;AAA3B,SAAd,CAAjB;AAAiE,OARnF,EADJ,KAWI,KAAKI,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAACV,QAAAA,OAAO,EAAE,KAAV;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B,OAAd,CAAjB;AACP;;AAEDa,IAAAA,oBAAoB,GAAG;AACnB,WAAKT,QAAL,GAAgB,KAAhB;AACH;;AAEDU,IAAAA,MAAM,GAAI;AAAA,0BACwB,KAAKhB,KAD7B;AAAA,YACEC,OADF,eACEA,OADF;AAAA,YACWC,QADX,eACWA,QADX;AAEN,UAAID,OAAJ,EACI,OAAO,IAAP;AACJ,UAAIC,QAAJ,EACI,OAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACJ,aAAO,oBAAC,kBAAD,oBAAwB,KAAKH,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AApCgC,GAArC;AAsCH;;AAGD,eAAeJ,QAAf","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from '../utils/API';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nfunction withAuth(ComponentToProtect) {\n    return class extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                loading: true,\n                redirect: false,\n            };\n            console.log(this.props);\n        }\n        componentDidMount() {\n            this._mounted = true;\n            if (cookies.get('token'))\n                API.withAuth()\n                    .then(res => {\n                        if (res.status === 200) {\n                            this._mounted && this.setState({loading: false});\n                        }\n                        else\n                            throw new Error(res.error);\n                    })\n                    .catch(() => {this._mounted && this.setState({loading: false, redirect: true})});\n            else\n                this._mounted && this.setState({loading: false, redirect: true});\n        }\n\n        componentWillUnmount() {\n            this._mounted = false;\n        }\n\n        render () {\n            const { loading, redirect } = this.state;\n            if (loading)\n                return null;\n            if (redirect)\n                return <Redirect to=\"/login\" />;\n            return <ComponentToProtect {...this.props} />\n        }\n    }\n}\n\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}