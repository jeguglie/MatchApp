{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/utils/withAuthAdmin.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from '../utils/API';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nfunction withAuth(ComponentToProtect) {\n  var _temp;\n\n  return _temp = class extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.componentDidMount = async () => {\n        this._mounted = true;\n        if (cookies.get('token')) await API.withAuthAdmin().then(res => {\n          if (res.status === 200) {\n            this._mounted && this.setState({\n              loading: false\n            });\n          } else throw new Error(res.error);\n        }).catch(() => {\n          this._mounted && this.setState({\n            loading: false,\n            redirect: true\n          });\n        });else this._mounted && this.setState({\n          loading: false,\n          redirect: true\n        });\n      };\n\n      this.state = {\n        loading: true,\n        redirect: false\n      };\n      this._mounted = false;\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    render() {\n      const {\n        loading,\n        redirect\n      } = this.state;\n      if (loading) return null;\n      if (redirect) return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n      return React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    }\n\n  }, _temp;\n}\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/utils/withAuthAdmin.js"],"names":["React","Redirect","API","Cookies","cookies","withAuth","ComponentToProtect","Component","constructor","props","componentDidMount","_mounted","get","withAuthAdmin","then","res","status","setState","loading","Error","error","catch","redirect","state","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AAEA,SAASE,QAAT,CAAkBC,kBAAlB,EAAsC;AAAA;;AAClC,iBAAO,cAAcN,KAAK,CAACO,SAApB,CAA8B;AACjCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAQnBC,iBARmB,GAQA,YAAW;AAC1B,aAAKC,QAAL,GAAgB,IAAhB;AACA,YAAIP,OAAO,CAACQ,GAAR,CAAY,OAAZ,CAAJ,EACI,MAAMV,GAAG,CAACW,aAAJ,GACDC,IADC,CACIC,GAAG,IAAI;AACT,cAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,iBAAKL,QAAL,IAAiB,KAAKM,QAAL,CAAc;AAACC,cAAAA,OAAO,EAAE;AAAV,aAAd,CAAjB;AACH,WAFD,MAII,MAAM,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,KAAd,CAAN;AACP,SAPC,EAQDC,KARC,CAQK,MAAM;AAAC,eAAKV,QAAL,IAAiB,KAAKM,QAAL,CAAc;AAACC,YAAAA,OAAO,EAAE,KAAV;AAAiBI,YAAAA,QAAQ,EAAE;AAA3B,WAAd,CAAjB;AAAiE,SAR7E,CAAN,CADJ,KAWI,KAAKX,QAAL,IAAiB,KAAKM,QAAL,CAAc;AAACC,UAAAA,OAAO,EAAE,KAAV;AAAiBI,UAAAA,QAAQ,EAAE;AAA3B,SAAd,CAAjB;AACP,OAtBkB;;AAEf,WAAKC,KAAL,GAAa;AACTL,QAAAA,OAAO,EAAE,IADA;AAETI,QAAAA,QAAQ,EAAE;AAFD,OAAb;AAIA,WAAKX,QAAL,GAAgB,KAAhB;AACH;;AAiBDa,IAAAA,oBAAoB,GAAG;AACnB,WAAKb,QAAL,GAAgB,KAAhB;AACH;;AAEDc,IAAAA,MAAM,GAAI;AACN,YAAM;AAAEP,QAAAA,OAAF;AAAWI,QAAAA;AAAX,UAAwB,KAAKC,KAAnC;AACA,UAAIL,OAAJ,EACI,OAAO,IAAP;AACJ,UAAII,QAAJ,EACI,OAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACJ,aAAO,oBAAC,kBAAD,oBAAwB,KAAKb,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AApCgC,GAArC;AAsCH;;AAED,eAAeJ,QAAf","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from '../utils/API';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nfunction withAuth(ComponentToProtect) {\n    return class extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                loading: true,\n                redirect: false,\n            };\n            this._mounted = false;\n        }\n        componentDidMount= async() => {\n            this._mounted = true;\n            if (cookies.get('token'))\n                await API.withAuthAdmin()\n                    .then(res => {\n                        if (res.status === 200) {\n                            this._mounted && this.setState({loading: false});\n                        }\n                        else\n                            throw new Error(res.error);\n                    })\n                    .catch(() => {this._mounted && this.setState({loading: false, redirect: true})});\n            else\n                this._mounted && this.setState({loading: false, redirect: true});\n        }\n\n        componentWillUnmount() {\n            this._mounted = false;\n        }\n\n        render () {\n            const { loading, redirect } = this.state;\n            if (loading)\n                return null;\n            if (redirect)\n                return <Redirect to=\"/\" />;\n            return <ComponentToProtect {...this.props} />\n        }\n    }\n}\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}