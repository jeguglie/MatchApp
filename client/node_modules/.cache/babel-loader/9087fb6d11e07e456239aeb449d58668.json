{"ast":null,"code":"var _jsxFileName = \"/Users/jeguglie/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js\";\nimport { Divider, Grid, Image, Label, Modal, Segment } from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport API from './../../utils/API';\nimport openSocket from 'socket.io-client';\nconst socket = openSocket('http://localhost:3002');\n\nclass ModalUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userLike = async () => {\n      socket.emit(\"like\", this.props.user.user_id);\n    };\n  }\n\n  componentDidMount() {\n    socket.on(\"sendlike\", msg => {\n      console.log(msg);\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          user = _this$props.user,\n          userInterests = _this$props.userInterests;\n    return React.createElement(Modal, {\n      dimmer: \"blurring\",\n      size: 'tiny',\n      open: this.props.showModal,\n      onClose: this.props.handleClose,\n      className: \"ModalCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: \"CardHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"CardHeaderTile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \" \", user.firstname, \" \", user.lastname, \", \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, user.age))), React.createElement(Modal.Content, {\n      className: \"ModalProfilView\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      className: \"RowImages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Image, {\n      rounded: true,\n      size: \"medium\",\n      src: user.imgs[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(Grid.Row, {\n      className: \"RowImages\",\n      centered: true,\n      columns: user.imgs.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, user.imgs.map((img, i) => {\n      if (i > 0) return React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Image, {\n        rounded: true,\n        size: \"small\",\n        src: user.imgs[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }))), React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      className: \"BioSegment\",\n      textAlign: \"center\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, user.bio)), React.createElement(Segment, {\n      className: \"CardUserActions\",\n      basic: true,\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Button.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"huge\",\n      id: \"like\",\n      onClick: this.userLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Like\"), React.createElement(Button.Or, {\n      text: \"or\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Button, {\n      size: \"huge\",\n      id: \"hide\",\n      positive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Hide\"))), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Label.Group, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), user.interests.map((data, i) => {\n      return React.createElement(Label, {\n        className: userInterests.find(interest => interest === data) ? classnames(\"interestLabel\", \"sameInterest\") : \"interestLabel\",\n        id: i,\n        key: i,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"#\"), data);\n    })))));\n  }\n\n}\n\nexport default ModalUser;","map":{"version":3,"sources":["/Users/jeguglie/Desktop/MatchApp/client/src/components/ModalUser/ModalUser.js"],"names":["Divider","Grid","Image","Label","Modal","Segment","Button","React","classnames","API","openSocket","socket","ModalUser","Component","constructor","props","userLike","emit","user","user_id","componentDidMount","on","msg","console","log","render","userInterests","showModal","handleClose","firstname","lastname","age","imgs","length","map","img","i","bio","interests","data","find","interest"],"mappings":"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","sourcesContent":["import {Divider, Grid, Image, Label, Modal, Segment} from \"semantic-ui-react\";\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport React from \"react\";\nimport classnames from 'classnames';\nimport API from './../../utils/API';\nimport openSocket from 'socket.io-client';\nconst  socket = openSocket('http://localhost:3002');\n\nclass ModalUser extends React.Component {\n\n    constructor(props){\n        super(props);\n    }\n    userLike = async() => {\n        socket.emit(\"like\", this.props.user.user_id);\n}\n\n    componentDidMount() {\n        socket.on(\"sendlike\", (msg) => {\n            console.log(msg);\n        })\n    }\n\n    render() {\n        const {user, userInterests } = this.props;\n        return (\n            <Modal\n                dimmer={\"blurring\"}\n                size={'tiny'}\n                open={this.props.showModal}\n                onClose={this.props.handleClose}\n                className=\"ModalCard\">\n                <Modal.Header className=\"CardHeader\"><h1\n                    className=\"CardHeaderTile\"> {user.firstname} {user.lastname}, <strong>{user.age}</strong></h1>\n                </Modal.Header>\n                <Modal.Content className=\"ModalProfilView\">\n                    <Modal.Header></Modal.Header>\n                    <Divider hidden/>\n                    <Grid centered columns={2}>\n                        <Grid.Column className=\"RowImages\">\n                            <Image rounded size='medium' src={user.imgs[0]}/>\n                        </Grid.Column>\n                        <Grid.Row className=\"RowImages\" centered columns={user.imgs.length}>\n                            {user.imgs.map((img, i) => {\n                                if (i > 0)\n                                    return (\n                                        <Grid.Column>\n                                            <Image rounded size='small' src={user.imgs[i]}/>\n                                        </Grid.Column>\n                                    )\n                            })}\n                        </Grid.Row>\n                    </Grid>\n                    <Modal.Description>\n                        <Segment className=\"BioSegment\" textAlign=\"center\" inverted>\n                            <p>{user.bio}</p>\n                        </Segment>\n                        <Segment className=\"CardUserActions\" basic textAlign=\"center\">\n                            <Button.Group>\n                                <Button\n                                    size='huge'\n                                    id=\"like\"\n                                    onClick={this.userLike}>Like</Button>\n                                <Button.Or text='or'/>\n                                <Button size='huge' id=\"hide\" positive>Hide</Button>\n                            </Button.Group>\n                        </Segment>\n                        <Divider hidden/>\n                        <Label.Group size='small'>\n                            <p/>\n                            {user.interests.map((data, i) => {\n                                return (\n                                    <Label\n                                        className={userInterests.find(interest => interest === data) ? classnames(\"interestLabel\",\"sameInterest\") : \"interestLabel\"}\n                                        id={i}\n                                        key={i}\n                                        data={data}>\n                                        <strong>#</strong>{data}</Label>\n                                )\n                            })}\n                        </Label.Group>\n                    </Modal.Description>\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}\n\nexport default ModalUser;"]},"metadata":{},"sourceType":"module"}