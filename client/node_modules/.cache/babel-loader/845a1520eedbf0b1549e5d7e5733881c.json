{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js\";\nimport React from 'react';\nimport { Form, Modal, Input, Divider, Icon } from 'semantic-ui-react';\nimport API from '../../utils/API';\n\nconst moment = require('moment');\n\nclass ModalChat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpen = user => {\n      this._mounted && this.setState({\n        showModal: true,\n        user: user\n      });\n    };\n\n    this.handleClose = () => {\n      this._mounted && this.setState({\n        showModal: false,\n        user: []\n      });\n    };\n\n    this.handleSend = async () => {\n      const message = this.innerRef.current.inputRef.current.value.toString();\n      const {\n        user_id\n      } = this.state;\n      let timestamp = new Date().getTime();\n      await API.sendMessage(user_id, message, timestamp).then(res => {\n        if (res.status === 200) {\n          this.addMessage(message, true, timestamp);\n          this.props.s_message_send(user_id, message, timestamp);\n        }\n      });\n    };\n\n    this.addMessage = (message, bool) => {\n      console.log(1);\n    };\n\n    this._mounted = false;\n    this.state = {\n      showModal: false,\n      user: [],\n      messages: []\n    };\n    this.innerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n  } // Outside Ref\n\n\n  render() {\n    const {\n      showModal,\n      user\n    } = this.state;\n\n    function userOnline() {\n      if (user.online) return React.createElement(\"span\", {\n        className: 'OnlineChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), \" \");else return React.createElement(\"span\", {\n        className: 'LastConnectionChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \" \", React.createElement(Icon, {\n        name: 'circle',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), \" \");\n    }\n\n    ;\n    return user ? React.createElement(Modal, {\n      className: 'ModalChat',\n      size: 'tiny',\n      open: showModal,\n      onClose: this.handleClose,\n      closeIcon: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      className: 'HeaderChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, userOnline(), \" \", ' ', React.createElement(\"span\", {\n      className: 'chatUserBadge',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, user.firstname)), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Modal.Content, {\n      scrolling: true,\n      className: 'ModalChatContent',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'inputChat',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      action: {\n        icon: 'send'\n      },\n      fluid: true,\n      ref: this.innerRef,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))))) : null;\n  }\n\n}\n\nexport default ModalChat;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js"],"names":["React","Form","Modal","Input","Divider","Icon","API","moment","require","ModalChat","Component","constructor","props","handleOpen","user","_mounted","setState","showModal","handleClose","handleSend","message","innerRef","current","inputRef","value","toString","user_id","state","timestamp","Date","getTime","sendMessage","then","res","status","addMessage","s_message_send","bool","console","log","messages","createRef","componentDidMount","render","userOnline","online","firstname","icon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Form, Modal, Input, Divider, Icon } from 'semantic-ui-react'\nimport API from '../../utils/API';\nconst moment = require('moment');\n\nclass ModalChat extends React.Component {\n    constructor(props){\n        super(props);\n        this._mounted = false;\n        this.state = {\n            showModal: false,\n            user: [],\n            messages: [],\n        };\n        this.innerRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n\n    // Outside Ref\n    handleOpen = (user) => {this._mounted && this.setState({showModal: true, user: user})};\n    handleClose = () => {this._mounted && this.setState({showModal: false, user: []})};\n    handleSend = async() => {\n        const message = this.innerRef.current.inputRef.current.value.toString();\n        const { user_id } = this.state;\n        let timestamp = new Date().getTime();\n        await API.sendMessage(user_id, message, timestamp)\n            .then(res => {\n                if (res.status === 200) {\n                    this.addMessage(message, true, timestamp);\n                    this.props.s_message_send(user_id, message, timestamp);\n                }\n            })\n    };\n\n    addMessage = (message, bool, ) => {\n        console.log(1);\n    };\n    render(){\n        const { showModal, user } = this.state;\n        function userOnline() {\n            if (user.online)\n                return <span className={'OnlineChat'}> <Icon name={'circle'}/> </span>;\n            else\n                return <span className={'LastConnectionChat'}> <Icon name={'circle'}/> </span>\n        };\n        return (\n            user ?\n                <Modal\n                    className={'ModalChat'}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    closeIcon>\n                    <Modal.Header className={'HeaderChat'}>\n                        {userOnline()} {' '}\n                        <span className={'chatUserBadge'}>{user.firstname}</span>\n                    </Modal.Header>\n                    <Divider hidden />\n                    <Modal.Content scrolling className={'ModalChatContent'}>\n                        <div className={'inputChat'}>\n                            <Form onSubmit={this.handleSend}>\n                                <Input\n                                    size='large'\n                                    action={{ icon: 'send' }}\n                                    fluid\n                                    ref={this.innerRef}\n                                    placeholder='Type a message...'\n                                />\n                            </Form>\n                        </div>\n                    </Modal.Content>\n                </Modal> : null\n        )\n    }\n}\n\nexport default ModalChat;"]},"metadata":{},"sourceType":"module"}