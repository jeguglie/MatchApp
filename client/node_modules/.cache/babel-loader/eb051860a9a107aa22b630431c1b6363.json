{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jeguglie/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Form,Modal,Input,Icon}from'semantic-ui-react';import API from'../../utils/API';var ModalChat=/*#__PURE__*/function(_React$Component){_inherits(ModalChat,_React$Component);function ModalChat(props){var _this;_classCallCheck(this,ModalChat);_this=_possibleConstructorReturn(this,_getPrototypeOf(ModalChat).call(this,props));_this.handleOpen=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this._mounted&&_this.setState({showModal:true,user:user});_context.next=3;return API.getMessages(user.user_id).then(function(res){if(res.status===200)_this._mounted&&_this.setState({messages:res.data.messages},function(){_this.innerRefScroll&&_this.innerRefScroll.current&&_this.innerRefScroll.current.scrollIntoView({behavior:'smooth',block:'end',inline:'end'});});});case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.handleClose=function(){_this._mounted&&_this.setState({showModal:false,user:[],messages:[]});};_this.handleSend=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var message,user_id;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:message=_this.state.message;user_id=_this.state.user.user_id;// Clear value in input\nif(!(message&&message.length)){_context2.next=5;break;}_context2.next=5;return API.sendMessage(user_id,message).then(function(res){if(res.status===200){_this.addMessage(message,true);_this._mounted&&_this.props.s_message_send(user_id,message);}});case 5:case\"end\":return _context2.stop();}}},_callee2);}));_this.addMessage=function(message,user_id_emitter,user_id_receiver){var messages=_this.state.messages;messages.push({user_id:user_id_emitter,user_id_dest:user_id_receiver,timestamp:new Date().getDate(),message:message});_this._mounted&&_this.setState({messages:messages,message:''},function(){_this.innerRefScroll&&_this.innerRefScroll.current&&_this.innerRefScroll.current.scrollIntoView({behavior:'smooth',block:'end',inline:'end'});});};_this.handleChange=function(e,_ref3){var value=_ref3.value;_this._mounted&&_this.setState({message:value});};_this._mounted=false;_this.state={showModal:false,user:[],messages:[],message:''};_this.innerRefScroll=React.createRef();return _this;}_createClass(ModalChat,[{key:\"componentDidMount\",value:function componentDidMount(){this._mounted=true;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}// Outside Ref\n},{key:\"render\",value:function render(){var _this$state=this.state,showModal=_this$state.showModal,user=_this$state.user,messages=_this$state.messages,message=_this$state.message;function userOnline(){if(user.online)return React.createElement(\"span\",{className:'OnlineChat'},\" \",React.createElement(Icon,{name:'circle'}),\" \");else return React.createElement(\"span\",{className:'LastConnectionChat'},\" \",React.createElement(Icon,{name:'circle'}),\" \");}function messagesRows(){var user_id=user.user_id;if(messages&&messages.length){return messages.map(function(obj,i){return React.createElement(\"div\",{key:i,className:obj.user_id===user_id?'yours messages':'mine messages'},React.createElement(\"div\",{className:'message'},React.createElement(\"p\",null,\" \",obj.message,\" \")));});}}return user?React.createElement(Modal,{className:'ModalChat',size:'tiny',open:showModal,onClose:this.handleClose,closeIcon:true},React.createElement(Modal.Header,{className:'HeaderChat'},userOnline(),\" \",' ',React.createElement(\"span\",{className:'chatUserBadge'},user.firstname)),React.createElement(Modal.Content,{scrolling:true,className:'ModalChatContent'},React.createElement(\"div\",{className:'messagesRows'},React.createElement(\"div\",{ref:this.innerRefScroll,className:'chat'},messagesRows()))),React.createElement(Modal.Actions,{className:'inputChat'},React.createElement(Form,{onSubmit:this.handleSend},React.createElement(Input,{size:\"large\",action:{icon:'send'},fluid:true,value:message,onChange:this.handleChange,placeholder:\"Type a message...\"})))):null;}}]);return ModalChat;}(React.Component);export default ModalChat;","map":{"version":3,"sources":["/Users/jeguglie/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js"],"names":["React","Form","Modal","Input","Icon","API","ModalChat","props","handleOpen","user","_mounted","setState","showModal","getMessages","user_id","then","res","status","messages","data","innerRefScroll","current","scrollIntoView","behavior","block","inline","handleClose","handleSend","message","state","length","sendMessage","addMessage","s_message_send","user_id_emitter","user_id_receiver","push","user_id_dest","timestamp","Date","getDate","handleChange","e","value","createRef","userOnline","online","messagesRows","map","obj","i","firstname","icon","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Modal, Input, Icon } from 'semantic-ui-react'\nimport API from '../../utils/API';\n\nclass ModalChat extends React.Component {\n    constructor(props){\n        super(props);\n        this._mounted = false;\n        this.state = {\n            showModal: false,\n            user: [],\n            messages: [],\n            message: ''\n        };\n        this.innerRefScroll = React.createRef();\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    // Outside Ref\n    handleOpen = async(user) => {\n        this._mounted && this.setState({showModal: true, user: user});\n        await API.getMessages(user.user_id)\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({messages: res.data.messages}, () => {\n                        this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n                            behavior: 'smooth',\n                            block: 'end',\n                            inline: 'end',\n                        });\n                    });\n            })\n    };\n    handleClose = () => {this._mounted && this.setState({showModal: false, user: [], messages: []})};\n    handleSend = async() => {\n        const message = this.state.message;\n        const user_id = this.state.user.user_id;\n        // Clear value in input\n        if (message && message.length)\n            await API.sendMessage(user_id, message)\n                .then(res => {\n                    if (res.status === 200) {\n                        this.addMessage(message, true);\n                        this._mounted && this.props.s_message_send(user_id, message);\n                    }\n                })\n    };\n\n    addMessage = (message, user_id_emitter, user_id_receiver) => {\n        let messages = this.state.messages;\n        messages.push({\n            user_id: user_id_emitter,\n            user_id_dest: user_id_receiver,\n            timestamp: new Date().getDate(),\n            message: message\n        });\n        this._mounted && this.setState({messages: messages, message: ''}, () => {\n            this.innerRefScroll && this.innerRefScroll.current && this.innerRefScroll.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'end',\n                inline: 'end',\n            });\n        });\n    };\n\n    handleChange = (e, { value}) => { this._mounted && this.setState({message: value}); };\n\n    render(){\n        const { showModal, user, messages, message } = this.state;\n        function userOnline() {\n            if (user.online)\n                return <span className={'OnlineChat'}> <Icon name={'circle'}/> </span>;\n            else\n                return <span className={'LastConnectionChat'}> <Icon name={'circle'}/> </span>\n        }\n        function messagesRows() {\n            let user_id = user.user_id;\n            if (messages && messages.length){\n                return messages.map( (obj, i) => {\n                    return (\n                        <div key={i} className={obj.user_id === user_id ? 'yours messages' : 'mine messages'}>\n                            <div  className={'message'}>\n                                <p> {obj.message} </p>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        }\n        return (\n            user ?\n                <Modal\n                    className={'ModalChat'}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    closeIcon >\n                    <Modal.Header className={'HeaderChat'}>\n                        {userOnline()} {' '}\n                        <span className={'chatUserBadge'}>{user.firstname}</span>\n                    </Modal.Header>\n                    <Modal.Content scrolling className={'ModalChatContent'}>\n                        <div className={'messagesRows'}>\n                            <div ref={this.innerRefScroll} className={'chat'}>\n                                    {messagesRows()}\n                            </div>\n                        </div>\n                    </Modal.Content>\n                    <Modal.Actions className={'inputChat'}>\n                            <Form onSubmit={this.handleSend}>\n                                <Input\n                                    size='large'\n                                    action={{ icon: 'send' }}\n                                    fluid\n                                    value={message}\n                                    onChange={this.handleChange}\n                                    placeholder='Type a message...'\n                                />\n                            </Form>\n                    </Modal.Actions>\n                </Modal> : null\n        )\n    }\n}\n\nexport default ModalChat;"]},"metadata":{},"sourceType":"module"}