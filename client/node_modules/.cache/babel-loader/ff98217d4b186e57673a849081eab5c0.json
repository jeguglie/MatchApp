{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jv/Desktop/MatchApp/client/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Grid,Form,Modal,Input,Divider,Icon}from'semantic-ui-react';import API from'../../utils/API';var moment=require('moment');var ModalChat=/*#__PURE__*/function(_React$Component){_inherits(ModalChat,_React$Component);function ModalChat(props){var _this;_classCallCheck(this,ModalChat);_this=_possibleConstructorReturn(this,_getPrototypeOf(ModalChat).call(this,props));_this.handleOpen=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this._mounted&&_this.setState({showModal:true,user:user});_context.next=3;return API.getMessages(user.user_id).then(function(res){if(res.status===200)_this._mounted&&_this.setState({messages:res.data.messages});});case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.handleClose=function(){_this._mounted&&_this.setState({showModal:false,user:[],messages:[]});};_this.handleSend=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var message,user_id;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:message=_this.innerRef.current.inputRef.current.value.toString();user_id=_this.state.user.user_id;_context2.next=4;return API.sendMessage(user_id,message).then(function(res){if(res.status===200){_this.addMessage(message,true);_this.props.s_message_send(user_id,message);}});case 4:case\"end\":return _context2.stop();}}},_callee2);}));_this.addMessage=function(message,user_id_emitter,user_id_receiver){var messages=_this.state.messages;messages.push({user_id:user_id_emitter,user_id_dest:user_id_receiver,timestamp:new Date().getDate(),message:message});_this._mounted&&_this.setState({messages:messages});};_this._mounted=false;_this.state={showModal:false,user:[],messages:[]};_this.innerRef=React.createRef();return _this;}_createClass(ModalChat,[{key:\"componentDidMount\",value:function componentDidMount(){this._mounted=true;}// Outside Ref\n},{key:\"render\",value:function render(){var _this$state=this.state,showModal=_this$state.showModal,user=_this$state.user,messages=_this$state.messages;function userOnline(){if(user.online)return React.createElement(\"span\",{className:'OnlineChat'},\" \",React.createElement(Icon,{name:'circle'}),\" \");else return React.createElement(\"span\",{className:'LastConnectionChat'},\" \",React.createElement(Icon,{name:'circle'}),\" \");}function messagesRows(){var user_id=user.user_id;if(messages&&messages.length){return messages.map(function(obj,i){return React.createElement(\"div\",{className:obj.user_id===user_id?'yours messages':'mine messages'},React.createElement(\"div\",{key:i,className:'message'},obj.message));});}}return user?React.createElement(Modal,{className:'ModalChat',size:'tiny',open:showModal,onClose:this.handleClose,closeIcon:true},React.createElement(Modal.Header,{className:'HeaderChat'},userOnline(),\" \",' ',React.createElement(\"span\",{className:'chatUserBadge'},user.firstname)),React.createElement(Divider,{hidden:true}),React.createElement(Modal.Content,{scrolling:true,className:'ModalChatContent'},React.createElement(\"div\",{className:'messagesRows'},React.createElement(\"div\",{className:'chat'},messagesRows())),React.createElement(\"div\",{className:'inputChat'},React.createElement(Form,{onSubmit:this.handleSend},React.createElement(Input,{size:\"large\",action:{icon:'send'},fluid:true,ref:this.innerRef,placeholder:\"Type a message...\"}))))):null;}}]);return ModalChat;}(React.Component);export default ModalChat;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/components/ModalChat/ModalChat.js"],"names":["React","Grid","Form","Modal","Input","Divider","Icon","API","moment","require","ModalChat","props","handleOpen","user","_mounted","setState","showModal","getMessages","user_id","then","res","status","messages","data","handleClose","handleSend","message","innerRef","current","inputRef","value","toString","state","sendMessage","addMessage","s_message_send","user_id_emitter","user_id_receiver","push","user_id_dest","timestamp","Date","getDate","createRef","userOnline","online","messagesRows","length","map","obj","i","firstname","icon","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Grid, Form, Modal, Input, Divider, Icon } from 'semantic-ui-react'\nimport API from '../../utils/API';\nconst moment = require('moment');\n\nclass ModalChat extends React.Component {\n    constructor(props){\n        super(props);\n        this._mounted = false;\n        this.state = {\n            showModal: false,\n            user: [],\n            messages: [],\n        };\n        this.innerRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n\n    // Outside Ref\n    handleOpen = async(user) => {\n        this._mounted && this.setState({showModal: true, user: user});\n        await API.getMessages(user.user_id)\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({messages: res.data.messages});\n            })\n    };\n    handleClose = () => {this._mounted && this.setState({showModal: false, user: [], messages: []})};\n    handleSend = async() => {\n        const message = this.innerRef.current.inputRef.current.value.toString();\n        const user_id = this.state.user.user_id;\n        await API.sendMessage(user_id, message)\n            .then(res => {\n                if (res.status === 200) {\n                    this.addMessage(message, true);\n                    this.props.s_message_send(user_id, message);\n                }\n            })\n    };\n\n    addMessage = (message, user_id_emitter, user_id_receiver) => {\n        let messages = this.state.messages;\n        messages.push({\n            user_id: user_id_emitter,\n            user_id_dest: user_id_receiver,\n            timestamp: new Date().getDate(),\n            message: message\n        });\n        this._mounted && this.setState({messages: messages});\n    };\n\n    render(){\n        const { showModal, user, messages } = this.state;\n        function userOnline() {\n            if (user.online)\n                return <span className={'OnlineChat'}> <Icon name={'circle'}/> </span>;\n            else\n                return <span className={'LastConnectionChat'}> <Icon name={'circle'}/> </span>\n        }\n        function messagesRows() {\n            let user_id = user.user_id;\n            if (messages && messages.length){\n                return messages.map( (obj, i) => {\n                    return (\n                            <div className={obj.user_id === user_id ? 'yours messages' : 'mine messages'}>\n                                <div key={i} className={'message'}>\n                                    {obj.message}\n                                </div>\n                            </div>\n                    )\n                })\n            }\n        }\n        return (\n            user ?\n                <Modal\n                    className={'ModalChat'}\n                    size={'tiny'}\n                    open={showModal}\n                    onClose={this.handleClose}\n                    closeIcon>\n                    <Modal.Header className={'HeaderChat'}>\n                        {userOnline()} {' '}\n                        <span className={'chatUserBadge'}>{user.firstname}</span>\n                    </Modal.Header>\n                    <Divider hidden />\n                    <Modal.Content scrolling className={'ModalChatContent'}>\n                        <div className={'messagesRows'}>\n                            <div className={'chat'}>\n                                    {messagesRows()}\n                            </div>\n                        </div>\n                        <div className={'inputChat'}>\n                            <Form onSubmit={this.handleSend}>\n                                <Input\n                                    size='large'\n                                    action={{ icon: 'send' }}\n                                    fluid\n                                    ref={this.innerRef}\n                                    placeholder='Type a message...'\n                                />\n                            </Form>\n                        </div>\n                    </Modal.Content>\n                </Modal> : null\n        )\n    }\n}\n\nexport default ModalChat;"]},"metadata":{},"sourceType":"module"}