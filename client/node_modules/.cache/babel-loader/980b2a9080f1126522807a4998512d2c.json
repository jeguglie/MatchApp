{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _reactComponentRef = require(\"@stardust-ui/react-component-ref\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon/Icon\"));\n\nvar _Label = _interopRequireDefault(require(\"../Label/Label\"));\n\nvar _ButtonContent = _interopRequireDefault(require(\"./ButtonContent\"));\n\nvar _ButtonGroup = _interopRequireDefault(require(\"./ButtonGroup\"));\n\nvar _ButtonOr = _interopRequireDefault(require(\"./ButtonOr\"));\n/**\n * A Button indicates a possible user action.\n * @see Form\n * @see Icon\n * @see Label\n */\n\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Button, _Component);\n\n  function Button() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"ref\", (0, _react.createRef)());\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"computeElementType\", function () {\n      var _this$props = _this.props,\n          attached = _this$props.attached,\n          label = _this$props.label;\n      if (!(0, _isNil2[\"default\"])(attached) || !(0, _isNil2[\"default\"])(label)) return 'div';\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"computeTabIndex\", function (ElementType) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tabIndex = _this$props2.tabIndex;\n      if (!(0, _isNil2[\"default\"])(tabIndex)) return tabIndex;\n      if (disabled) return -1;\n      if (ElementType === 'div') return 0;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"focus\", function () {\n      return (0, _invoke2[\"default\"])(_this.ref.current, 'focus');\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleClick\", function (e) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      (0, _invoke2[\"default\"])(_this.props, 'onClick', e, _this.props);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"hasIconClass\", function () {\n      var _this$props3 = _this.props,\n          labelPosition = _this$props3.labelPosition,\n          children = _this$props3.children,\n          content = _this$props3.content,\n          icon = _this$props3.icon;\n      if (icon === true) return true;\n      return icon && (labelPosition || _lib.childrenUtils.isNil(children) && (0, _isNil2[\"default\"])(content));\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Button, [{\n    key: \"computeButtonAriaRole\",\n    value: function computeButtonAriaRole(ElementType) {\n      var role = this.props.role;\n      if (!(0, _isNil2[\"default\"])(role)) return role;\n      if (ElementType !== 'button') return 'button';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          active = _this$props4.active,\n          animated = _this$props4.animated,\n          attached = _this$props4.attached,\n          basic = _this$props4.basic,\n          children = _this$props4.children,\n          circular = _this$props4.circular,\n          className = _this$props4.className,\n          color = _this$props4.color,\n          compact = _this$props4.compact,\n          content = _this$props4.content,\n          disabled = _this$props4.disabled,\n          floated = _this$props4.floated,\n          fluid = _this$props4.fluid,\n          icon = _this$props4.icon,\n          inverted = _this$props4.inverted,\n          label = _this$props4.label,\n          labelPosition = _this$props4.labelPosition,\n          loading = _this$props4.loading,\n          negative = _this$props4.negative,\n          positive = _this$props4.positive,\n          primary = _this$props4.primary,\n          secondary = _this$props4.secondary,\n          size = _this$props4.size,\n          toggle = _this$props4.toggle;\n      var baseClasses = (0, _classnames[\"default\"])(color, size, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(this.hasIconClass(), 'icon'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(primary, 'primary'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(toggle, 'toggle'), (0, _lib.useKeyOrValueAndKey)(animated, 'animated'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'));\n      var labeledClasses = (0, _classnames[\"default\"])((0, _lib.useKeyOrValueAndKey)(labelPosition || !!label, 'labeled'));\n      var wrapperClasses = (0, _classnames[\"default\"])((0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useValueAndKey)(floated, 'floated'));\n      var rest = (0, _lib.getUnhandledProps)(Button, this.props);\n      var ElementType = (0, _lib.getElementType)(Button, this.props, this.computeElementType);\n      var tabIndex = this.computeTabIndex(ElementType);\n\n      if (!(0, _isNil2[\"default\"])(label)) {\n        var buttonClasses = (0, _classnames[\"default\"])('ui', baseClasses, 'button', className);\n        var containerClasses = (0, _classnames[\"default\"])('ui', labeledClasses, 'button', className, wrapperClasses);\n\n        var labelElement = _Label[\"default\"].create(label, {\n          defaultProps: {\n            basic: true,\n            pointing: labelPosition === 'left' ? 'right' : 'left'\n          },\n          autoGenerateKey: false\n        });\n\n        return _react[\"default\"].createElement(ElementType, (0, _extends2[\"default\"])({}, rest, {\n          className: containerClasses,\n          onClick: this.handleClick\n        }), labelPosition === 'left' && labelElement, _react[\"default\"].createElement(_reactComponentRef.Ref, {\n          innerRef: this.ref\n        }, _react[\"default\"].createElement(\"button\", {\n          className: buttonClasses,\n          \"aria-pressed\": toggle ? !!active : undefined,\n          disabled: disabled,\n          tabIndex: tabIndex\n        }, _Icon[\"default\"].create(icon, {\n          autoGenerateKey: false\n        }), \" \", content)), (labelPosition === 'right' || !labelPosition) && labelElement);\n      }\n\n      var classes = (0, _classnames[\"default\"])('ui', baseClasses, wrapperClasses, labeledClasses, 'button', className);\n      var hasChildren = !_lib.childrenUtils.isNil(children);\n      var role = this.computeButtonAriaRole(ElementType);\n      return _react[\"default\"].createElement(_reactComponentRef.Ref, {\n        innerRef: this.ref\n      }, _react[\"default\"].createElement(ElementType, (0, _extends2[\"default\"])({}, rest, {\n        className: classes,\n        \"aria-pressed\": toggle ? !!active : undefined,\n        disabled: disabled && ElementType === 'button' || undefined,\n        onClick: this.handleClick,\n        role: role,\n        tabIndex: tabIndex\n      }), hasChildren && children, !hasChildren && _Icon[\"default\"].create(icon, {\n        autoGenerateKey: false\n      }), !hasChildren && content));\n    }\n  }]);\n  return Button;\n}(_react.Component);\n\n(0, _defineProperty2[\"default\"])(Button, \"defaultProps\", {\n  as: 'button'\n});\n(0, _defineProperty2[\"default\"])(Button, \"Content\", _ButtonContent[\"default\"]);\n(0, _defineProperty2[\"default\"])(Button, \"Group\", _ButtonGroup[\"default\"]);\n(0, _defineProperty2[\"default\"])(Button, \"Or\", _ButtonOr[\"default\"]);\n(0, _defineProperty2[\"default\"])(Button, \"handledProps\", [\"active\", \"animated\", \"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"fluid\", \"icon\", \"inverted\", \"label\", \"labelPosition\", \"loading\", \"negative\", \"onClick\", \"positive\", \"primary\", \"role\", \"secondary\", \"size\", \"tabIndex\", \"toggle\"]);\nButton.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes[\"default\"].elementType,\n\n  /** A button can show it is currently the active user selection. */\n  active: _propTypes[\"default\"].bool,\n\n  /** A button can animate to show hidden content. */\n  animated: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].oneOf(['fade', 'vertical'])]),\n\n  /** A button can be attached to other content. */\n  attached: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].oneOf(['left', 'right', 'top', 'bottom'])]),\n\n  /** A basic button is less pronounced. */\n  basic: _propTypes[\"default\"].bool,\n\n  /** Primary content. */\n  children: _lib.customPropTypes.every([_propTypes[\"default\"].node, _lib.customPropTypes.disallow(['label']), _lib.customPropTypes.givenProps({\n    icon: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string.isRequired, _propTypes[\"default\"].object.isRequired, _propTypes[\"default\"].element.isRequired])\n  }, _lib.customPropTypes.disallow(['icon']))]),\n\n  /** A button can be circular. */\n  circular: _propTypes[\"default\"].bool,\n\n  /** Additional classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** A button can have different colors */\n  color: _propTypes[\"default\"].oneOf([].concat((0, _toConsumableArray2[\"default\"])(_lib.SUI.COLORS), ['facebook', 'google plus', 'instagram', 'linkedin', 'twitter', 'vk', 'youtube'])),\n\n  /** A button can reduce its padding to fit into tighter spaces. */\n  compact: _propTypes[\"default\"].bool,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** A button can show it is currently unable to be interacted with. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** A button can be aligned to the left or right of its container. */\n  floated: _propTypes[\"default\"].oneOf(_lib.SUI.FLOATS),\n\n  /** A button can take the width of its container. */\n  fluid: _propTypes[\"default\"].bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon />. */\n  icon: _lib.customPropTypes.some([_propTypes[\"default\"].bool, _propTypes[\"default\"].string, _propTypes[\"default\"].object, _propTypes[\"default\"].element]),\n\n  /** A button can be formatted to appear on dark backgrounds. */\n  inverted: _propTypes[\"default\"].bool,\n\n  /** Add a Label by text, props object, or pass a <Label />. */\n  label: _lib.customPropTypes.some([_propTypes[\"default\"].string, _propTypes[\"default\"].object, _propTypes[\"default\"].element]),\n\n  /** A labeled button can format a Label or Icon to appear on the left or right. */\n  labelPosition: _propTypes[\"default\"].oneOf(['right', 'left']),\n\n  /** A button can show a loading indicator. */\n  loading: _propTypes[\"default\"].bool,\n\n  /** A button can hint towards a negative consequence. */\n  negative: _propTypes[\"default\"].bool,\n\n  /**\n   * Called after user's click.\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: _propTypes[\"default\"].func,\n\n  /** A button can hint towards a positive consequence. */\n  positive: _propTypes[\"default\"].bool,\n\n  /** A button can be formatted to show different levels of emphasis. */\n  primary: _propTypes[\"default\"].bool,\n\n  /** The role of the HTML element. */\n  role: _propTypes[\"default\"].string,\n\n  /** A button can be formatted to show different levels of emphasis. */\n  secondary: _propTypes[\"default\"].bool,\n\n  /** A button can have different sizes. */\n  size: _propTypes[\"default\"].oneOf(_lib.SUI.SIZES),\n\n  /** A button can receive focus. */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** A button can be formatted to toggle on and off. */\n  toggle: _propTypes[\"default\"].bool\n} : {};\nButton.create = (0, _lib.createShorthandFactory)(Button, function (value) {\n  return {\n    content: value\n  };\n});\nvar _default = Button;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}