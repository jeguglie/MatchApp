{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _map2 = _interopRequireDefault(require(\"lodash/map\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n/**\n * Buttons can be grouped.\n */\n\n\nfunction ButtonGroup(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      buttons = props.buttons,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      floated = props.floated,\n      fluid = props.fluid,\n      icon = props.icon,\n      inverted = props.inverted,\n      labeled = props.labeled,\n      negative = props.negative,\n      positive = props.positive,\n      primary = props.primary,\n      secondary = props.secondary,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      widths = props.widths;\n  var classes = (0, _classnames[\"default\"])('ui', color, size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(icon, 'icon'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(labeled, 'labeled'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(primary, 'primary'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(toggle, 'toggle'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useWidthProp)(widths), 'buttons', className);\n  var rest = (0, _lib.getUnhandledProps)(ButtonGroup, props);\n  var ElementType = (0, _lib.getElementType)(ButtonGroup, props);\n\n  if ((0, _isNil2[\"default\"])(buttons)) {\n    return _react[\"default\"].createElement(ElementType, (0, _extends2[\"default\"])({}, rest, {\n      className: classes\n    }), _lib.childrenUtils.isNil(children) ? content : children);\n  }\n\n  return _react[\"default\"].createElement(ElementType, (0, _extends2[\"default\"])({}, rest, {\n    className: classes\n  }), (0, _map2[\"default\"])(buttons, function (button) {\n    return _Button[\"default\"].create(button);\n  }));\n}\n\nButtonGroup.handledProps = [\"as\", \"attached\", \"basic\", \"buttons\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"floated\", \"fluid\", \"icon\", \"inverted\", \"labeled\", \"negative\", \"positive\", \"primary\", \"secondary\", \"size\", \"toggle\", \"vertical\", \"widths\"];\nButtonGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes[\"default\"].elementType,\n\n  /** Groups can be attached to other content. */\n  attached: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].oneOf(['left', 'right', 'top', 'bottom'])]),\n\n  /** Groups can be less pronounced. */\n  basic: _propTypes[\"default\"].bool,\n\n  /** Array of shorthand Button values. */\n  buttons: _lib.customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: _propTypes[\"default\"].node,\n\n  /** Additional classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** Groups can have a shared color. */\n  color: _propTypes[\"default\"].oneOf(_lib.SUI.COLORS),\n\n  /** Groups can reduce their padding to fit into tighter spaces. */\n  compact: _propTypes[\"default\"].bool,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** Groups can be aligned to the left or right of its container. */\n  floated: _propTypes[\"default\"].oneOf(_lib.SUI.FLOATS),\n\n  /** Groups can take the width of their container. */\n  fluid: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted as icons. */\n  icon: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted to appear on dark backgrounds. */\n  inverted: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted as labeled icon buttons. */\n  labeled: _propTypes[\"default\"].bool,\n\n  /** Groups can hint towards a negative consequence. */\n  negative: _propTypes[\"default\"].bool,\n\n  /** Groups can hint towards a positive consequence. */\n  positive: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  primary: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  secondary: _propTypes[\"default\"].bool,\n\n  /** Groups can have different sizes. */\n  size: _propTypes[\"default\"].oneOf(_lib.SUI.SIZES),\n\n  /** Groups can be formatted to toggle on and off. */\n  toggle: _propTypes[\"default\"].bool,\n\n  /** Groups can be formatted to appear vertically. */\n  vertical: _propTypes[\"default\"].bool,\n\n  /** Groups can have their widths divided evenly. */\n  widths: _propTypes[\"default\"].oneOf(_lib.SUI.WIDTHS)\n} : {};\nvar _default = ButtonGroup;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}