{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MatchApp/client/src/containers/Admin/Admin.js\";\nimport React from 'react';\nimport { List, Image, Button, Transition, Grid, Divider } from 'semantic-ui-react';\nimport API from '../../utils/API';\n\nconst moment = require('moment');\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this._mounted = true;\n      await API.getNotifications().then(res => {\n        if (res.status === 200) this._mounted && this.setState({\n          notifications: res.data.notifications\n        });\n      });\n      await API.getUserInterests().then(response => {\n        if (response.status === 200) this._mounted && this.setState({\n          interests: response.data.interests\n        });\n      });\n    };\n\n    this.handleDismiss = async (i, notif_id) => {\n      if (this._mounted) {\n        this.state.notifications.splice(i, 1);\n        this._mounted && this.setState({\n          notifications: this.state.notifications\n        }, async () => {\n          await API.deletenotif(notif_id);\n          await this.props.updateNotifNb();\n        });\n      }\n    };\n\n    this.clickedUser = async userIdFocus => {\n      // Send notification\n      this.props.sWallVisit(userIdFocus); // Inner Ref Modal\n\n      this.innerRefModal.current && this.innerRefModal.current.loadUser(userIdFocus);\n    };\n\n    this.updateNotifs = async () => {\n      await API.getNotifications().then(async res => {\n        if (res.status === 200) {\n          this._mounted && this.setState({\n            notifications: res.data.notifications\n          });\n          this.props.updateNotifNb();\n        }\n      });\n    };\n\n    this.state = {\n      notifications: [],\n      userIdFocus: null,\n      loading: false,\n      interests: []\n    };\n    this._mounted = false;\n    this.innerRefModal = React.createRef();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  renderSwitchType(type) {\n    switch (type) {\n      case 1:\n        return 'Visited your profile  ';\n\n      case 2:\n        return 'Send you a message  ';\n\n      case 3:\n        return 'Liked you back  ';\n\n      case 4:\n        return 'Remove his like  ';\n\n      case 5:\n        return 'Like your profile  ';\n\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const {\n      users\n    } = this.state;\n    return React.createElement(Grid, {\n      columns: 1,\n      textAlign: 'center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      textAlign: 'left',\n      mobile: 16,\n      tablet: 8,\n      computer: 8,\n      largeScreen: 8,\n      widescreen: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"NotificationsTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Reported users\"))), React.createElement(\"div\", {\n      className: \"NotificationsHistoric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Transition.Group, {\n      as: List,\n      duration: 200,\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, users.length < 1 ? React.createElement(\"div\", {\n      className: 'nothingtoshow',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Nothing to show\")) : null, users.map((obj, i) => React.createElement(List.Item, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.handleDismiss(i, obj.user_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Dismiss\")), React.createElement(List.Content, {\n      as: \"a\",\n      className: \"NotifFirstname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, ' ', \" \", obj.user_id)), i < users.length - 1 ? React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }) : null)))))));\n  }\n\n}\n\nexport default Admin;","map":{"version":3,"sources":["/Users/jv/Desktop/MatchApp/client/src/containers/Admin/Admin.js"],"names":["React","List","Image","Button","Transition","Grid","Divider","API","moment","require","Admin","Component","constructor","props","componentDidMount","_mounted","getNotifications","then","res","status","setState","notifications","data","getUserInterests","response","interests","handleDismiss","i","notif_id","state","splice","deletenotif","updateNotifNb","clickedUser","userIdFocus","sWallVisit","innerRefModal","current","loadUser","updateNotifs","loading","createRef","componentWillUnmount","renderSwitchType","type","render","users","length","map","obj","user_id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {List, Image, Button, Transition, Grid, Divider} from 'semantic-ui-react';\nimport API from '../../utils/API';\nconst moment = require('moment');\n\n\nclass Admin extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            notifications: [],\n            userIdFocus: null,\n            loading: false,\n            interests: [],\n        };\n        this._mounted = false;\n        this.innerRefModal = React.createRef();\n\n    }\n\n    componentDidMount = async() => {\n        this._mounted = true;\n        await API.getNotifications()\n            .then(res => {\n                if (res.status === 200)\n                    this._mounted && this.setState({notifications: res.data.notifications})\n            });\n        await API.getUserInterests()\n            .then(response => {\n                if (response.status === 200)\n                    this._mounted && this.setState({interests: response.data.interests})\n            });\n    };\n\n\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    renderSwitchType(type) {\n        switch (type) {\n            case 1:\n                return 'Visited your profile  ';\n            case 2:\n                return 'Send you a message  ';\n            case 3:\n                return 'Liked you back  ';\n            case 4:\n                return 'Remove his like  ';\n            case 5:\n                return 'Like your profile  ';\n            default:\n                return null;\n        }\n    };\n\n    handleDismiss = async(i, notif_id) => {\n        if (this._mounted) {\n            this.state.notifications.splice(i, 1);\n            this._mounted && this.setState({notifications: this.state.notifications}, async() => {\n                await API.deletenotif(notif_id);\n                await this.props.updateNotifNb();\n            });\n        }\n    };\n\n    clickedUser = async(userIdFocus) => {\n        // Send notification\n        this.props.sWallVisit(userIdFocus);\n        // Inner Ref Modal\n        this.innerRefModal.current && this.innerRefModal.current.loadUser(userIdFocus);\n    };\n\n    updateNotifs = async() => {\n        await API.getNotifications()\n            .then(async(res) => {\n                if (res.status === 200) {\n                    this._mounted && this.setState({notifications: res.data.notifications});\n                    this.props.updateNotifNb();\n                }\n            })\n    };\n\n\n    render(){\n        const { users} = this.state;\n        return (\n            <Grid columns={1} textAlign={'center'}>\n                <Grid.Column textAlign={'left'} mobile={16} tablet={8} computer={8} largeScreen={8} widescreen={8}>\n                    <div className='NotificationsTitle'>\n                        <Grid.Row>\n                            <h1>Reported users</h1>\n                        </Grid.Row>\n                    </div>\n                    <div className={\"NotificationsHistoric\"}>\n                        <Grid.Row>\n                            <Transition.Group\n                                as={List}\n                                duration={200}\n                                verticalAlign='middle'\n                            >\n                                {users.length < 1 ?\n                                    <div className={'nothingtoshow'}>\n                                        <p>Nothing to show</p>\n                                    </div> :\n                                    null\n                                }\n                                {users.map((obj, i) => (\n                                    <List.Item key={i}>\n                                        <List.Content>\n                                            <List.Content floated='right'>\n                                                <Button\n                                                    onClick={() => this.handleDismiss(i, obj.user_id)}>\n                                                    Dismiss\n                                                </Button>\n                                            </List.Content>\n                                            <List.Content\n                                                as='a'\n                                                className={\"NotifFirstname\"}\n                                            >\n                                                {' '} {obj.user_id}</List.Content>\n                                        </List.Content>\n                                        {i < users.length  - 1? <Divider /> : null}\n                                    </List.Item>\n                                ))}\n                            </Transition.Group>\n                        </Grid.Row>\n                    </div>\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}\n\nexport default Admin;"]},"metadata":{},"sourceType":"module"}