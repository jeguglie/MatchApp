{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _eventStack = _interopRequireDefault(require(\"@semantic-ui-react/event-stack\"));\n\nvar _reactComponentRef = require(\"@stardust-ui/react-component-ref\");\n\nvar _keyboardKey = _interopRequireDefault(require(\"keyboard-key\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _PortalInner = _interopRequireDefault(require(\"./PortalInner\"));\n/**\n * A component that allows you to render children outside their parent.\n * @see Modal\n * @see Popup\n * @see Dimmer\n * @see Confirm\n */\n\n\nvar Portal =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Portal, _Component);\n\n  function Portal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Portal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"contentRef\", (0, _react.createRef)());\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"triggerRef\", (0, _react.createRef)());\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"latestDocumentMouseDownEvent\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleDocumentMouseDown\", function (e) {\n      _this.latestDocumentMouseDownEvent = e;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleDocumentClick\", function (e) {\n      var closeOnDocumentClick = _this.props.closeOnDocumentClick;\n      var currentMouseDownEvent = _this.latestDocumentMouseDownEvent;\n      _this.latestDocumentMouseDownEvent = null;\n\n      if (!_this.contentRef.current || // no portal\n      (0, _lib.doesNodeContainClick)(_this.triggerRef.current, e) || // event happened in trigger (delegate to trigger handlers)\n      currentMouseDownEvent && (0, _lib.doesNodeContainClick)(_this.contentRef.current, currentMouseDownEvent) || // event originated in the portal but was ended outside\n      (0, _lib.doesNodeContainClick)(_this.contentRef.current, e) // event happened in the portal\n      ) {\n          return;\n        } // ignore the click\n\n\n      if (closeOnDocumentClick) {\n        _this.close(e);\n      }\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleEscape\", function (e) {\n      if (!_this.props.closeOnEscape) return;\n      if (_keyboardKey[\"default\"].getCode(e) !== _keyboardKey[\"default\"].Escape) return;\n\n      _this.close(e);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handlePortalMouseLeave\", function (e) {\n      var _this$props = _this.props,\n          closeOnPortalMouseLeave = _this$props.closeOnPortalMouseLeave,\n          mouseLeaveDelay = _this$props.mouseLeaveDelay;\n      if (!closeOnPortalMouseLeave) return; // Do not close the portal when 'mouseleave' is triggered by children\n\n      if (e.target !== _this.contentRef.current) return;\n      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handlePortalMouseEnter\", function () {\n      // In order to enable mousing from the trigger to the portal, we need to\n      // clear the mouseleave timer that was set when leaving the trigger.\n      var closeOnPortalMouseLeave = _this.props.closeOnPortalMouseLeave;\n      if (!closeOnPortalMouseLeave) return;\n      clearTimeout(_this.mouseLeaveTimer);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerBlur\", function (e) {\n      var _this$props2 = _this.props,\n          trigger = _this$props2.trigger,\n          closeOnTriggerBlur = _this$props2.closeOnTriggerBlur; // Call original event handler\n\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n\n      _invoke2[\"default\"].apply(void 0, [trigger, 'props.onBlur', e].concat(rest)); // IE 11 doesn't work with relatedTarget in blur events\n\n\n      var target = e.relatedTarget || document.activeElement; // do not close if focus is given to the portal\n\n      var didFocusPortal = (0, _invoke2[\"default\"])(_this.contentRef.current, 'contains', target);\n      if (!closeOnTriggerBlur || didFocusPortal) return;\n\n      _this.close(e);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerClick\", function (e) {\n      var _this$props3 = _this.props,\n          trigger = _this$props3.trigger,\n          closeOnTriggerClick = _this$props3.closeOnTriggerClick,\n          openOnTriggerClick = _this$props3.openOnTriggerClick;\n      var open = _this.state.open; // Call original event handler\n\n      for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        rest[_key3 - 1] = arguments[_key3];\n      }\n\n      _invoke2[\"default\"].apply(void 0, [trigger, 'props.onClick', e].concat(rest));\n\n      if (open && closeOnTriggerClick) {\n        _this.close(e);\n      } else if (!open && openOnTriggerClick) {\n        _this.open(e);\n      }\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerFocus\", function (e) {\n      var _this$props4 = _this.props,\n          trigger = _this$props4.trigger,\n          openOnTriggerFocus = _this$props4.openOnTriggerFocus; // Call original event handler\n\n      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        rest[_key4 - 1] = arguments[_key4];\n      }\n\n      _invoke2[\"default\"].apply(void 0, [trigger, 'props.onFocus', e].concat(rest));\n\n      if (!openOnTriggerFocus) return;\n\n      _this.open(e);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerMouseLeave\", function (e) {\n      clearTimeout(_this.mouseEnterTimer);\n      var _this$props5 = _this.props,\n          trigger = _this$props5.trigger,\n          closeOnTriggerMouseLeave = _this$props5.closeOnTriggerMouseLeave,\n          mouseLeaveDelay = _this$props5.mouseLeaveDelay; // Call original event handler\n\n      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        rest[_key5 - 1] = arguments[_key5];\n      }\n\n      _invoke2[\"default\"].apply(void 0, [trigger, 'props.onMouseLeave', e].concat(rest));\n\n      if (!closeOnTriggerMouseLeave) return;\n      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerMouseEnter\", function (e) {\n      clearTimeout(_this.mouseLeaveTimer);\n      var _this$props6 = _this.props,\n          trigger = _this$props6.trigger,\n          mouseEnterDelay = _this$props6.mouseEnterDelay,\n          openOnTriggerMouseEnter = _this$props6.openOnTriggerMouseEnter; // Call original event handler\n\n      for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        rest[_key6 - 1] = arguments[_key6];\n      }\n\n      _invoke2[\"default\"].apply(void 0, [trigger, 'props.onMouseEnter', e].concat(rest));\n\n      if (!openOnTriggerMouseEnter) return;\n      _this.mouseEnterTimer = _this.openWithTimeout(e, mouseEnterDelay);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"open\", function (e) {\n      var onOpen = _this.props.onOpen;\n      if (onOpen) onOpen(e, _this.props);\n\n      _this.trySetState({\n        open: true\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"openWithTimeout\", function (e, delay) {\n      // React wipes the entire event object and suggests using e.persist() if\n      // you need the event for async access. However, even with e.persist\n      // certain required props (e.g. currentTarget) are null so we're forced to clone.\n      var eventClone = (0, _objectSpread2[\"default\"])({}, e);\n      return setTimeout(function () {\n        return _this.open(eventClone);\n      }, delay || 0);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"close\", function (e) {\n      var onClose = _this.props.onClose;\n      if (onClose) onClose(e, _this.props);\n\n      _this.trySetState({\n        open: false\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"closeWithTimeout\", function (e, delay) {\n      // React wipes the entire event object and suggests using e.persist() if\n      // you need the event for async access. However, even with e.persist\n      // certain required props (e.g. currentTarget) are null so we're forced to clone.\n      var eventClone = (0, _objectSpread2[\"default\"])({}, e);\n      return setTimeout(function () {\n        return _this.close(eventClone);\n      }, delay || 0);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleMount\", function () {\n      (0, _invoke2[\"default\"])(_this.props, 'onMount', null, _this.props);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleUnmount\", function () {\n      (0, _invoke2[\"default\"])(_this.props, 'onUnmount', null, _this.props);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTriggerRef\", function (c) {\n      _this.triggerRef.current = c;\n      (0, _reactComponentRef.handleRef)(_this.props.triggerRef, c);\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Portal, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clean up timers\n      clearTimeout(this.mouseEnterTimer);\n      clearTimeout(this.mouseLeaveTimer);\n    } // ----------------------------------------\n    // Document Event Handlers\n    // ----------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          children = _this$props7.children,\n          eventPool = _this$props7.eventPool,\n          mountNode = _this$props7.mountNode,\n          trigger = _this$props7.trigger;\n      var open = this.state.open;\n      return _react[\"default\"].createElement(_react.Fragment, null, open && _react[\"default\"].createElement(_react.Fragment, null, _react[\"default\"].createElement(_PortalInner[\"default\"], {\n        innerRef: this.contentRef,\n        mountNode: mountNode,\n        onMount: this.handleMount,\n        onUnmount: this.handleUnmount\n      }, children), _react[\"default\"].createElement(_eventStack[\"default\"], {\n        name: \"mouseleave\",\n        on: this.handlePortalMouseLeave,\n        pool: eventPool,\n        target: this.contentRef\n      }), _react[\"default\"].createElement(_eventStack[\"default\"], {\n        name: \"mouseenter\",\n        on: this.handlePortalMouseEnter,\n        pool: eventPool,\n        target: this.contentRef\n      }), _react[\"default\"].createElement(_eventStack[\"default\"], {\n        name: \"mousedown\",\n        on: this.handleDocumentMouseDown,\n        pool: eventPool\n      }), _react[\"default\"].createElement(_eventStack[\"default\"], {\n        name: \"click\",\n        on: this.handleDocumentClick,\n        pool: eventPool\n      }), _react[\"default\"].createElement(_eventStack[\"default\"], {\n        name: \"keydown\",\n        on: this.handleEscape,\n        pool: eventPool\n      })), trigger && _react[\"default\"].createElement(_reactComponentRef.Ref, {\n        innerRef: this.handleTriggerRef\n      }, (0, _react.cloneElement)(trigger, {\n        onBlur: this.handleTriggerBlur,\n        onClick: this.handleTriggerClick,\n        onFocus: this.handleTriggerFocus,\n        onMouseLeave: this.handleTriggerMouseLeave,\n        onMouseEnter: this.handleTriggerMouseEnter\n      })));\n    }\n  }]);\n  return Portal;\n}(_lib.AutoControlledComponent);\n\n(0, _defineProperty2[\"default\"])(Portal, \"defaultProps\", {\n  closeOnDocumentClick: true,\n  closeOnEscape: true,\n  eventPool: 'default',\n  openOnTriggerClick: true\n});\n(0, _defineProperty2[\"default\"])(Portal, \"autoControlledProps\", ['open']);\n(0, _defineProperty2[\"default\"])(Portal, \"Inner\", _PortalInner[\"default\"]);\n(0, _defineProperty2[\"default\"])(Portal, \"handledProps\", [\"children\", \"closeOnDocumentClick\", \"closeOnEscape\", \"closeOnPortalMouseLeave\", \"closeOnTriggerBlur\", \"closeOnTriggerClick\", \"closeOnTriggerMouseLeave\", \"defaultOpen\", \"eventPool\", \"mountNode\", \"mouseEnterDelay\", \"mouseLeaveDelay\", \"onClose\", \"onMount\", \"onOpen\", \"onUnmount\", \"open\", \"openOnTriggerClick\", \"openOnTriggerFocus\", \"openOnTriggerMouseEnter\", \"trigger\", \"triggerRef\"]);\nPortal.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Primary content. */\n  children: _propTypes[\"default\"].node.isRequired,\n\n  /** Controls whether or not the portal should close when the document is clicked. */\n  closeOnDocumentClick: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should close when escape is pressed is displayed. */\n  closeOnEscape: _propTypes[\"default\"].bool,\n\n  /**\n   * Controls whether or not the portal should close when mousing out of the portal.\n   * NOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the\n   * gap from the trigger to the portal.\n   */\n  closeOnPortalMouseLeave: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should close on blur of the trigger. */\n  closeOnTriggerBlur: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should close on click of the trigger. */\n  closeOnTriggerClick: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should close when mousing out of the trigger. */\n  closeOnTriggerMouseLeave: _propTypes[\"default\"].bool,\n\n  /** Initial value of open. */\n  defaultOpen: _propTypes[\"default\"].bool,\n\n  /** Event pool namespace that is used to handle component events */\n  eventPool: _propTypes[\"default\"].string,\n\n  /** The node where the portal should mount. */\n  mountNode: _propTypes[\"default\"].any,\n\n  /** Milliseconds to wait before opening on mouse over */\n  mouseEnterDelay: _propTypes[\"default\"].number,\n\n  /** Milliseconds to wait before closing on mouse leave */\n  mouseLeaveDelay: _propTypes[\"default\"].number,\n\n  /**\n   * Called when a close event happens\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClose: _propTypes[\"default\"].func,\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onMount: _propTypes[\"default\"].func,\n\n  /**\n   * Called when an open event happens\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onOpen: _propTypes[\"default\"].func,\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onUnmount: _propTypes[\"default\"].func,\n\n  /** Controls whether or not the portal is displayed. */\n  open: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should open when the trigger is clicked. */\n  openOnTriggerClick: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should open on focus of the trigger. */\n  openOnTriggerFocus: _propTypes[\"default\"].bool,\n\n  /** Controls whether or not the portal should open when mousing over the trigger. */\n  openOnTriggerMouseEnter: _propTypes[\"default\"].bool,\n\n  /** Element to be rendered in-place where the portal is defined. */\n  trigger: _propTypes[\"default\"].node,\n\n  /** Called with a ref to the trigger node. */\n  triggerRef: _lib.customPropTypes.ref\n} : {};\nvar _default = Portal;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}